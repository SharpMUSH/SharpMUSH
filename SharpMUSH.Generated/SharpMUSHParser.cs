//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/SharpMUSH/SharpMUSH.Generated/SharpMUSHParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SharpMUSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPARENWS=1, ESCAPE=2, OBRACK=3, CBRACK=4, OBRACE=5, CBRACE=6, CPAREN=7, 
		CCARET=8, COMMAWS=9, EQUALS=10, PERCENT=11, SEMICOLON=12, COLON=13, OANSI=14, 
		RSPACE=15, FUNCHAR=16, OTHER=17, REG_STARTCARET=18, REG_NUM=19, VWX=20, 
		ARG_NUM=21, SPACE=22, BLANKLINE=23, TAB=24, DBREF=25, ENACTOR_NAME=26, 
		CAP_ENACTOR_NAME=27, ACCENT_NAME=28, MONIKER_NAME=29, SUB_PRONOUN=30, 
		OBJ_PRONOUN=31, POS_PRONOUN=32, ABS_POS_PRONOUN=33, CALLED_DBREF=34, EXECUTOR_DBREF=35, 
		LOCATION_DBREF=36, LASTCOMMAND_BEFORE_EVAL=37, LASTCOMMAND_AFTER_EVAL=38, 
		INVOCATION_DEPTH=39, CURRENT_ARG_COUNT=40, ITEXT_NUM=41, STEXT_NUM=42, 
		UNESCAPE=43, ESCAPING_OTHER=44, CANSI=45, ANSICHARACTER=46;
	public const int
		RULE_singleCommandString = 0, RULE_commandString = 1, RULE_commandList = 2, 
		RULE_command = 3, RULE_firstCommandMatch = 4, RULE_eqsplitCommandArgs = 5, 
		RULE_eqsplitCommand = 6, RULE_commaCommandArgs = 7, RULE_singleCommandArg = 8, 
		RULE_plainString = 9, RULE_evaluationString = 10, RULE_explicitEvaluationString = 11, 
		RULE_explicitEvaluationStringSubstitution = 12, RULE_explicitEvaluationStringFunction = 13, 
		RULE_explicitEvaluationText = 14, RULE_funName = 15, RULE_function = 16, 
		RULE_funArguments = 17, RULE_validSubstitution = 18, RULE_complexSubstitutionSymbol = 19, 
		RULE_substitutionSymbol = 20, RULE_genericText = 21, RULE_escapedText = 22, 
		RULE_ansi = 23;
	public static readonly string[] ruleNames = {
		"singleCommandString", "commandString", "commandList", "command", "firstCommandMatch", 
		"eqsplitCommandArgs", "eqsplitCommand", "commaCommandArgs", "singleCommandArg", 
		"plainString", "evaluationString", "explicitEvaluationString", "explicitEvaluationStringSubstitution", 
		"explicitEvaluationStringFunction", "explicitEvaluationText", "funName", 
		"function", "funArguments", "validSubstitution", "complexSubstitutionSymbol", 
		"substitutionSymbol", "genericText", "escapedText", "ansi"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'['", "']'", "'{'", "'}'", "')'", "'>'", null, "'='", 
		"'%'", "';'", "':'", "'\\u001B'", "' '", null, null, null, null, null, 
		null, null, null, null, "'#'", "'n'", "'N'", "'~'", null, null, null, 
		null, null, "'@'", "'!'", null, null, null, "'?'", "'+'", null, null, 
		null, null, "'m'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPARENWS", "ESCAPE", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "CPAREN", 
		"CCARET", "COMMAWS", "EQUALS", "PERCENT", "SEMICOLON", "COLON", "OANSI", 
		"RSPACE", "FUNCHAR", "OTHER", "REG_STARTCARET", "REG_NUM", "VWX", "ARG_NUM", 
		"SPACE", "BLANKLINE", "TAB", "DBREF", "ENACTOR_NAME", "CAP_ENACTOR_NAME", 
		"ACCENT_NAME", "MONIKER_NAME", "SUB_PRONOUN", "OBJ_PRONOUN", "POS_PRONOUN", 
		"ABS_POS_PRONOUN", "CALLED_DBREF", "EXECUTOR_DBREF", "LOCATION_DBREF", 
		"LASTCOMMAND_BEFORE_EVAL", "LASTCOMMAND_AFTER_EVAL", "INVOCATION_DEPTH", 
		"CURRENT_ARG_COUNT", "ITEXT_NUM", "STEXT_NUM", "UNESCAPE", "ESCAPING_OTHER", 
		"CANSI", "ANSICHARACTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SharpMUSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SharpMUSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SharpMUSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SharpMUSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SingleCommandStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public SingleCommandStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleCommandString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleCommandString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleCommandStringContext singleCommandString() {
		SingleCommandStringContext _localctx = new SingleCommandStringContext(Context, State);
		EnterRule(_localctx, 0, RULE_singleCommandString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			command();
			State = 49;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandListContext commandList() {
			return GetRuleContext<CommandListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public CommandStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandStringContext commandString() {
		CommandStringContext _localctx = new CommandStringContext(Context, State);
		EnterRule(_localctx, 2, RULE_commandString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			commandList();
			State = 52;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(SharpMUSHParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(SharpMUSHParser.SEMICOLON, i);
		}
		public CommandListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandListContext commandList() {
		CommandListContext _localctx = new CommandListContext(Context, State);
		EnterRule(_localctx, 4, RULE_commandList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			command();
			State = 59;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 55;
					Match(SEMICOLON);
					State = 56;
					command();
					}
					} 
				}
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FirstCommandMatchContext firstCommandMatch() {
			return GetRuleContext<FirstCommandMatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSPACE() { return GetToken(SharpMUSHParser.RSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 6, RULE_command);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62;
				firstCommandMatch();
				State = 63;
				Match(RSPACE);
				State = 64;
				evaluationString();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				firstCommandMatch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstCommandMatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public FirstCommandMatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstCommandMatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstCommandMatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstCommandMatchContext firstCommandMatch() {
		FirstCommandMatchContext _localctx = new FirstCommandMatchContext(Context, State);
		EnterRule(_localctx, 8, RULE_firstCommandMatch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqsplitCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg() {
			return GetRuleContext<SingleCommandArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommaCommandArgsContext commaCommandArgs() {
			return GetRuleContext<CommaCommandArgsContext>(0);
		}
		public EqsplitCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqsplitCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqsplitCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqsplitCommandArgsContext eqsplitCommandArgs() {
		EqsplitCommandArgsContext _localctx = new EqsplitCommandArgsContext(Context, State);
		EnterRule(_localctx, 10, RULE_eqsplitCommandArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			singleCommandArg();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 72;
				Match(EQUALS);
				State = 73;
				commaCommandArgs();
				}
			}

			State = 76;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqsplitCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext[] singleCommandArg() {
			return GetRuleContexts<SingleCommandArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg(int i) {
			return GetRuleContext<SingleCommandArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		public EqsplitCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqsplitCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqsplitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqsplitCommandContext eqsplitCommand() {
		EqsplitCommandContext _localctx = new EqsplitCommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_eqsplitCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			singleCommandArg();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 79;
				Match(EQUALS);
				State = 80;
				singleCommandArg();
				}
			}

			State = 83;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext[] singleCommandArg() {
			return GetRuleContexts<SingleCommandArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg(int i) {
			return GetRuleContext<SingleCommandArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAWS() { return GetTokens(SharpMUSHParser.COMMAWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAWS(int i) {
			return GetToken(SharpMUSHParser.COMMAWS, i);
		}
		public CommaCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaCommandArgsContext commaCommandArgs() {
		CommaCommandArgsContext _localctx = new CommaCommandArgsContext(Context, State);
		EnterRule(_localctx, 14, RULE_commaCommandArgs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			singleCommandArg();
			State = 90;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 86;
					Match(COMMAWS);
					State = 87;
					singleCommandArg();
					}
					} 
				}
				State = 92;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 93;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleCommandArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public SingleCommandArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleCommandArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleCommandArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleCommandArgContext singleCommandArg() {
		SingleCommandArgContext _localctx = new SingleCommandArgContext(Context, State);
		EnterRule(_localctx, 16, RULE_singleCommandArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public PlainStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlainString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainStringContext plainString() {
		PlainStringContext _localctx = new PlainStringContext(Context, State);
		EnterRule(_localctx, 18, RULE_plainString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			evaluationString();
			State = 98;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext[] explicitEvaluationString() {
			return GetRuleContexts<ExplicitEvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString(int i) {
			return GetRuleContext<ExplicitEvaluationStringContext>(i);
		}
		public EvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluationStringContext evaluationString() {
		EvaluationStringContext _localctx = new EvaluationStringContext(Context, State);
		EnterRule(_localctx, 20, RULE_evaluationString);
		try {
			int _alt;
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				function();
				State = 104;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 101;
						explicitEvaluationString();
						}
						} 
					}
					State = 106;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107;
				explicitEvaluationString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SharpMUSHParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext[] explicitEvaluationString() {
			return GetRuleContexts<ExplicitEvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString(int i) {
			return GetRuleContext<ExplicitEvaluationStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SharpMUSHParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringFunctionContext explicitEvaluationStringFunction() {
			return GetRuleContext<ExplicitEvaluationStringFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringSubstitutionContext explicitEvaluationStringSubstitution() {
			return GetRuleContext<ExplicitEvaluationStringSubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationTextContext explicitEvaluationText() {
			return GetRuleContext<ExplicitEvaluationTextContext>(0);
		}
		public ExplicitEvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringContext explicitEvaluationString() {
		ExplicitEvaluationStringContext _localctx = new ExplicitEvaluationStringContext(Context, State);
		EnterRule(_localctx, 22, RULE_explicitEvaluationString);
		try {
			int _alt;
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110;
				Match(OBRACE);
				State = 111;
				explicitEvaluationString();
				State = 112;
				Match(CBRACE);
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 113;
						explicitEvaluationString();
						}
						} 
					}
					State = 118;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				explicitEvaluationStringFunction();
				State = 123;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 120;
						explicitEvaluationString();
						}
						} 
					}
					State = 125;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 126;
				explicitEvaluationStringSubstitution();
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 127;
						explicitEvaluationString();
						}
						} 
					}
					State = 132;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 133;
				explicitEvaluationText();
				State = 137;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 134;
						explicitEvaluationString();
						}
						} 
					}
					State = 139;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringSubstitutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidSubstitutionContext validSubstitution() {
			return GetRuleContext<ValidSubstitutionContext>(0);
		}
		public ExplicitEvaluationStringSubstitutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationStringSubstitution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationStringSubstitution(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringSubstitutionContext explicitEvaluationStringSubstitution() {
		ExplicitEvaluationStringSubstitutionContext _localctx = new ExplicitEvaluationStringSubstitutionContext(Context, State);
		EnterRule(_localctx, 24, RULE_explicitEvaluationStringSubstitution);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(PERCENT);
			State = 143;
			validSubstitution();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(SharpMUSHParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(SharpMUSHParser.CBRACK, 0); }
		public ExplicitEvaluationStringFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationStringFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationStringFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringFunctionContext explicitEvaluationStringFunction() {
		ExplicitEvaluationStringFunctionContext _localctx = new ExplicitEvaluationStringFunctionContext(Context, State);
		EnterRule(_localctx, 26, RULE_explicitEvaluationStringFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(OBRACK);
			State = 146;
			evaluationString();
			State = 147;
			Match(CBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericTextContext genericText() {
			return GetRuleContext<GenericTextContext>(0);
		}
		public ExplicitEvaluationTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationTextContext explicitEvaluationText() {
		ExplicitEvaluationTextContext _localctx = new ExplicitEvaluationTextContext(Context, State);
		EnterRule(_localctx, 28, RULE_explicitEvaluationText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			genericText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCHAR() { return GetToken(SharpMUSHParser.FUNCHAR, 0); }
		public FunNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunNameContext funName() {
		FunNameContext _localctx = new FunNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_funName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(FUNCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunNameContext funName() {
			return GetRuleContext<FunNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPARENWS() { return GetToken(SharpMUSHParser.OPARENWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(SharpMUSHParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunArgumentsContext funArguments() {
			return GetRuleContext<FunArgumentsContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			funName();
			State = 154;
			Match(OPARENWS);
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 155;
				funArguments();
				}
				break;
			}
			State = 158;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext[] evaluationString() {
			return GetRuleContexts<EvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString(int i) {
			return GetRuleContext<EvaluationStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAWS() { return GetTokens(SharpMUSHParser.COMMAWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAWS(int i) {
			return GetToken(SharpMUSHParser.COMMAWS, i);
		}
		public FunArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunArgumentsContext funArguments() {
		FunArgumentsContext _localctx = new FunArgumentsContext(Context, State);
		EnterRule(_localctx, 34, RULE_funArguments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			evaluationString();
			State = 165;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 161;
					Match(COMMAWS);
					State = 162;
					evaluationString();
					}
					} 
				}
				State = 167;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidSubstitutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComplexSubstitutionSymbolContext complexSubstitutionSymbol() {
			return GetRuleContext<ComplexSubstitutionSymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionSymbolContext substitutionSymbol() {
			return GetRuleContext<SubstitutionSymbolContext>(0);
		}
		public ValidSubstitutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validSubstitution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidSubstitution(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidSubstitutionContext validSubstitution() {
		ValidSubstitutionContext _localctx = new ValidSubstitutionContext(Context, State);
		EnterRule(_localctx, 36, RULE_validSubstitution);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REG_STARTCARET:
			case REG_NUM:
			case VWX:
			case ITEXT_NUM:
			case STEXT_NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				complexSubstitutionSymbol();
				}
				break;
			case EQUALS:
			case PERCENT:
			case COLON:
			case ARG_NUM:
			case SPACE:
			case BLANKLINE:
			case TAB:
			case DBREF:
			case ENACTOR_NAME:
			case CAP_ENACTOR_NAME:
			case ACCENT_NAME:
			case MONIKER_NAME:
			case SUB_PRONOUN:
			case OBJ_PRONOUN:
			case POS_PRONOUN:
			case ABS_POS_PRONOUN:
			case CALLED_DBREF:
			case EXECUTOR_DBREF:
			case LOCATION_DBREF:
			case LASTCOMMAND_BEFORE_EVAL:
			case LASTCOMMAND_AFTER_EVAL:
			case INVOCATION_DEPTH:
			case CURRENT_ARG_COUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169;
				substitutionSymbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexSubstitutionSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG_STARTCARET() { return GetToken(SharpMUSHParser.REG_STARTCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CCARET() { return GetToken(SharpMUSHParser.CCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext[] explicitEvaluationString() {
			return GetRuleContexts<ExplicitEvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString(int i) {
			return GetRuleContext<ExplicitEvaluationStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG_NUM() { return GetToken(SharpMUSHParser.REG_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITEXT_NUM() { return GetToken(SharpMUSHParser.ITEXT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEXT_NUM() { return GetToken(SharpMUSHParser.STEXT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VWX() { return GetToken(SharpMUSHParser.VWX, 0); }
		public ComplexSubstitutionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexSubstitutionSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexSubstitutionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexSubstitutionSymbolContext complexSubstitutionSymbol() {
		ComplexSubstitutionSymbolContext _localctx = new ComplexSubstitutionSymbolContext(Context, State);
		EnterRule(_localctx, 38, RULE_complexSubstitutionSymbol);
		try {
			int _alt;
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REG_STARTCARET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				Match(REG_STARTCARET);
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 173;
						explicitEvaluationString();
						}
						} 
					}
					State = 178;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				}
				State = 179;
				Match(CCARET);
				}
				break;
			case REG_NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				Match(REG_NUM);
				}
				break;
			case ITEXT_NUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181;
				Match(ITEXT_NUM);
				}
				break;
			case STEXT_NUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 182;
				Match(STEXT_NUM);
				}
				break;
			case VWX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 183;
				Match(VWX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstitutionSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(SharpMUSHParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANKLINE() { return GetToken(SharpMUSHParser.BLANKLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(SharpMUSHParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SharpMUSHParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBREF() { return GetToken(SharpMUSHParser.DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENACTOR_NAME() { return GetToken(SharpMUSHParser.ENACTOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAP_ENACTOR_NAME() { return GetToken(SharpMUSHParser.CAP_ENACTOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCENT_NAME() { return GetToken(SharpMUSHParser.ACCENT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONIKER_NAME() { return GetToken(SharpMUSHParser.MONIKER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_PRONOUN() { return GetToken(SharpMUSHParser.SUB_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJ_PRONOUN() { return GetToken(SharpMUSHParser.OBJ_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POS_PRONOUN() { return GetToken(SharpMUSHParser.POS_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS_POS_PRONOUN() { return GetToken(SharpMUSHParser.ABS_POS_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG_NUM() { return GetToken(SharpMUSHParser.ARG_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED_DBREF() { return GetToken(SharpMUSHParser.CALLED_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTOR_DBREF() { return GetToken(SharpMUSHParser.EXECUTOR_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION_DBREF() { return GetToken(SharpMUSHParser.LOCATION_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTCOMMAND_BEFORE_EVAL() { return GetToken(SharpMUSHParser.LASTCOMMAND_BEFORE_EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTCOMMAND_AFTER_EVAL() { return GetToken(SharpMUSHParser.LASTCOMMAND_AFTER_EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOCATION_DEPTH() { return GetToken(SharpMUSHParser.INVOCATION_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ARG_COUNT() { return GetToken(SharpMUSHParser.CURRENT_ARG_COUNT, 0); }
		public SubstitutionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substitutionSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstitutionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstitutionSymbolContext substitutionSymbol() {
		SubstitutionSymbolContext _localctx = new SubstitutionSymbolContext(Context, State);
		EnterRule(_localctx, 40, RULE_substitutionSymbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2199021169664L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EscapedTextContext escapedText() {
			return GetRuleContext<EscapedTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnsiContext ansi() {
			return GetRuleContext<AnsiContext>(0);
		}
		public GenericTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTextContext genericText() {
		GenericTextContext _localctx = new GenericTextContext(Context, State);
		EnterRule(_localctx, 42, RULE_genericText);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				escapedText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189;
				ansi();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 190;
				MatchWildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SharpMUSHParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNESCAPE() { return GetToken(SharpMUSHParser.UNESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPING_OTHER() { return GetToken(SharpMUSHParser.ESCAPING_OTHER, 0); }
		public EscapedTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscapedText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapedTextContext escapedText() {
		EscapedTextContext _localctx = new EscapedTextContext(Context, State);
		EnterRule(_localctx, 44, RULE_escapedText);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193;
				Match(ESCAPE);
				State = 194;
				Match(UNESCAPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				Match(ESCAPE);
				State = 196;
				Match(ESCAPING_OTHER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnsiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OANSI() { return GetToken(SharpMUSHParser.OANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CANSI() { return GetToken(SharpMUSHParser.CANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSICHARACTER() { return GetToken(SharpMUSHParser.ANSICHARACTER, 0); }
		public AnsiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ansi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnsi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnsiContext ansi() {
		AnsiContext _localctx = new AnsiContext(Context, State);
		EnterRule(_localctx, 46, RULE_ansi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			Match(OANSI);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANSICHARACTER) {
				{
				State = 200;
				Match(ANSICHARACTER);
				}
			}

			State = 203;
			Match(CANSI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,46,206,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,5,2,58,8,2,10,
		2,12,2,61,9,2,1,3,1,3,1,3,1,3,1,3,3,3,68,8,3,1,4,1,4,1,5,1,5,1,5,3,5,75,
		8,5,1,5,1,5,1,6,1,6,1,6,3,6,82,8,6,1,6,1,6,1,7,1,7,1,7,5,7,89,8,7,10,7,
		12,7,92,9,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,5,10,103,8,10,10,10,
		12,10,106,9,10,1,10,3,10,109,8,10,1,11,1,11,1,11,1,11,5,11,115,8,11,10,
		11,12,11,118,9,11,1,11,1,11,5,11,122,8,11,10,11,12,11,125,9,11,1,11,1,
		11,5,11,129,8,11,10,11,12,11,132,9,11,1,11,1,11,5,11,136,8,11,10,11,12,
		11,139,9,11,3,11,141,8,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,
		1,15,1,15,1,16,1,16,1,16,3,16,157,8,16,1,16,1,16,1,17,1,17,1,17,5,17,164,
		8,17,10,17,12,17,167,9,17,1,18,1,18,3,18,171,8,18,1,19,1,19,5,19,175,8,
		19,10,19,12,19,178,9,19,1,19,1,19,1,19,1,19,1,19,3,19,185,8,19,1,20,1,
		20,1,21,1,21,1,21,3,21,192,8,21,1,22,1,22,1,22,1,22,3,22,198,8,22,1,23,
		1,23,3,23,202,8,23,1,23,1,23,1,23,9,59,90,104,116,123,130,137,165,176,
		0,24,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		0,1,3,0,10,11,13,13,21,40,207,0,48,1,0,0,0,2,51,1,0,0,0,4,54,1,0,0,0,6,
		67,1,0,0,0,8,69,1,0,0,0,10,71,1,0,0,0,12,78,1,0,0,0,14,85,1,0,0,0,16,95,
		1,0,0,0,18,97,1,0,0,0,20,108,1,0,0,0,22,140,1,0,0,0,24,142,1,0,0,0,26,
		145,1,0,0,0,28,149,1,0,0,0,30,151,1,0,0,0,32,153,1,0,0,0,34,160,1,0,0,
		0,36,170,1,0,0,0,38,184,1,0,0,0,40,186,1,0,0,0,42,191,1,0,0,0,44,197,1,
		0,0,0,46,199,1,0,0,0,48,49,3,6,3,0,49,50,5,0,0,1,50,1,1,0,0,0,51,52,3,
		4,2,0,52,53,5,0,0,1,53,3,1,0,0,0,54,59,3,6,3,0,55,56,5,12,0,0,56,58,3,
		6,3,0,57,55,1,0,0,0,58,61,1,0,0,0,59,60,1,0,0,0,59,57,1,0,0,0,60,5,1,0,
		0,0,61,59,1,0,0,0,62,63,3,8,4,0,63,64,5,15,0,0,64,65,3,20,10,0,65,68,1,
		0,0,0,66,68,3,8,4,0,67,62,1,0,0,0,67,66,1,0,0,0,68,7,1,0,0,0,69,70,3,20,
		10,0,70,9,1,0,0,0,71,74,3,16,8,0,72,73,5,10,0,0,73,75,3,14,7,0,74,72,1,
		0,0,0,74,75,1,0,0,0,75,76,1,0,0,0,76,77,5,0,0,1,77,11,1,0,0,0,78,81,3,
		16,8,0,79,80,5,10,0,0,80,82,3,16,8,0,81,79,1,0,0,0,81,82,1,0,0,0,82,83,
		1,0,0,0,83,84,5,0,0,1,84,13,1,0,0,0,85,90,3,16,8,0,86,87,5,9,0,0,87,89,
		3,16,8,0,88,86,1,0,0,0,89,92,1,0,0,0,90,91,1,0,0,0,90,88,1,0,0,0,91,93,
		1,0,0,0,92,90,1,0,0,0,93,94,5,0,0,1,94,15,1,0,0,0,95,96,3,20,10,0,96,17,
		1,0,0,0,97,98,3,20,10,0,98,99,5,0,0,1,99,19,1,0,0,0,100,104,3,32,16,0,
		101,103,3,22,11,0,102,101,1,0,0,0,103,106,1,0,0,0,104,105,1,0,0,0,104,
		102,1,0,0,0,105,109,1,0,0,0,106,104,1,0,0,0,107,109,3,22,11,0,108,100,
		1,0,0,0,108,107,1,0,0,0,109,21,1,0,0,0,110,111,5,5,0,0,111,112,3,22,11,
		0,112,116,5,6,0,0,113,115,3,22,11,0,114,113,1,0,0,0,115,118,1,0,0,0,116,
		117,1,0,0,0,116,114,1,0,0,0,117,141,1,0,0,0,118,116,1,0,0,0,119,123,3,
		26,13,0,120,122,3,22,11,0,121,120,1,0,0,0,122,125,1,0,0,0,123,124,1,0,
		0,0,123,121,1,0,0,0,124,141,1,0,0,0,125,123,1,0,0,0,126,130,3,24,12,0,
		127,129,3,22,11,0,128,127,1,0,0,0,129,132,1,0,0,0,130,131,1,0,0,0,130,
		128,1,0,0,0,131,141,1,0,0,0,132,130,1,0,0,0,133,137,3,28,14,0,134,136,
		3,22,11,0,135,134,1,0,0,0,136,139,1,0,0,0,137,138,1,0,0,0,137,135,1,0,
		0,0,138,141,1,0,0,0,139,137,1,0,0,0,140,110,1,0,0,0,140,119,1,0,0,0,140,
		126,1,0,0,0,140,133,1,0,0,0,141,23,1,0,0,0,142,143,5,11,0,0,143,144,3,
		36,18,0,144,25,1,0,0,0,145,146,5,3,0,0,146,147,3,20,10,0,147,148,5,4,0,
		0,148,27,1,0,0,0,149,150,3,42,21,0,150,29,1,0,0,0,151,152,5,16,0,0,152,
		31,1,0,0,0,153,154,3,30,15,0,154,156,5,1,0,0,155,157,3,34,17,0,156,155,
		1,0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,159,5,7,0,0,159,33,1,0,0,0,
		160,165,3,20,10,0,161,162,5,9,0,0,162,164,3,20,10,0,163,161,1,0,0,0,164,
		167,1,0,0,0,165,166,1,0,0,0,165,163,1,0,0,0,166,35,1,0,0,0,167,165,1,0,
		0,0,168,171,3,38,19,0,169,171,3,40,20,0,170,168,1,0,0,0,170,169,1,0,0,
		0,171,37,1,0,0,0,172,176,5,18,0,0,173,175,3,22,11,0,174,173,1,0,0,0,175,
		178,1,0,0,0,176,177,1,0,0,0,176,174,1,0,0,0,177,179,1,0,0,0,178,176,1,
		0,0,0,179,185,5,8,0,0,180,185,5,19,0,0,181,185,5,41,0,0,182,185,5,42,0,
		0,183,185,5,20,0,0,184,172,1,0,0,0,184,180,1,0,0,0,184,181,1,0,0,0,184,
		182,1,0,0,0,184,183,1,0,0,0,185,39,1,0,0,0,186,187,7,0,0,0,187,41,1,0,
		0,0,188,192,3,44,22,0,189,192,3,46,23,0,190,192,9,0,0,0,191,188,1,0,0,
		0,191,189,1,0,0,0,191,190,1,0,0,0,192,43,1,0,0,0,193,194,5,2,0,0,194,198,
		5,43,0,0,195,196,5,2,0,0,196,198,5,44,0,0,197,193,1,0,0,0,197,195,1,0,
		0,0,198,45,1,0,0,0,199,201,5,14,0,0,200,202,5,46,0,0,201,200,1,0,0,0,201,
		202,1,0,0,0,202,203,1,0,0,0,203,204,5,45,0,0,204,47,1,0,0,0,20,59,67,74,
		81,90,104,108,116,123,130,137,140,156,165,170,176,184,191,197,201
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
