//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:/SharpMUSH/SharpMUSH.Generated/SharpMUSHParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SharpMUSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPAREN=1, ESCAPE=2, OBRACK=3, CBRACK=4, OBRACE=5, CBRACE=6, CPAREN=7, 
		OCARET=8, CCARET=9, COMMA=10, EQUALS=11, DOLLAR=12, PERCENT=13, SEMICOLON=14, 
		COLON=15, OANSI=16, RSPACE=17, FUNCHAR=18, OTHER=19, REG_STARTCARET=20, 
		REG_NUM=21, VWX=22, ARG_NUM=23, SPACE=24, BLANKLINE=25, TAB=26, DBREF=27, 
		ENACTOR_NAME=28, CAP_ENACTOR_NAME=29, ACCENT_NAME=30, MONIKER_NAME=31, 
		SUB_PRONOUN=32, OBJ_PRONOUN=33, POS_PRONOUN=34, ABS_POS_PRONOUN=35, CALLED_DBREF=36, 
		EXECUTOR_DBREF=37, LOCATION_DBREF=38, LASTCOMMAND_BEFORE_EVAL=39, LASTCOMMAND_AFTER_EVAL=40, 
		INVOCATION_DEPTH=41, CURRENT_ARG_COUNT=42, ITEXT_NUM=43, STEXT_NUM=44, 
		UNESCAPE=45, ESCAPING_OTHER=46, CANSI=47, ANSICHARACTER=48;
	public const int
		RULE_singleCommandString = 0, RULE_commandString = 1, RULE_commandList = 2, 
		RULE_command = 3, RULE_firstCommandMatch = 4, RULE_eqsplitCommandArgs = 5, 
		RULE_commaCommandArgs = 6, RULE_singleCommandArg = 7, RULE_plainString = 8, 
		RULE_evaluationString = 9, RULE_explicitEvaluationString = 10, RULE_explicitEvaluationStringSubstitution = 11, 
		RULE_explicitEvaluationStringFunction = 12, RULE_explicitEvaluationText = 13, 
		RULE_funName = 14, RULE_function = 15, RULE_funArguments = 16, RULE_validSubstitution = 17, 
		RULE_complexSubstitutionSymbol = 18, RULE_substitutionSymbol = 19, RULE_genericText = 20, 
		RULE_escapedText = 21, RULE_ansi = 22;
	public static readonly string[] ruleNames = {
		"singleCommandString", "commandString", "commandList", "command", "firstCommandMatch", 
		"eqsplitCommandArgs", "commaCommandArgs", "singleCommandArg", "plainString", 
		"evaluationString", "explicitEvaluationString", "explicitEvaluationStringSubstitution", 
		"explicitEvaluationStringFunction", "explicitEvaluationText", "funName", 
		"function", "funArguments", "validSubstitution", "complexSubstitutionSymbol", 
		"substitutionSymbol", "genericText", "escapedText", "ansi"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", null, "'['", "']'", "'{'", "'}'", "')'", "'<'", "'>'", "','", 
		"'='", "'$'", "'%'", "';'", "':'", "'\\u001B'", "' '", null, null, null, 
		null, null, null, null, null, null, "'#'", "'n'", "'N'", "'~'", null, 
		null, null, null, null, "'@'", "'!'", null, null, null, "'?'", "'+'", 
		null, null, null, null, "'m'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPAREN", "ESCAPE", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "CPAREN", 
		"OCARET", "CCARET", "COMMA", "EQUALS", "DOLLAR", "PERCENT", "SEMICOLON", 
		"COLON", "OANSI", "RSPACE", "FUNCHAR", "OTHER", "REG_STARTCARET", "REG_NUM", 
		"VWX", "ARG_NUM", "SPACE", "BLANKLINE", "TAB", "DBREF", "ENACTOR_NAME", 
		"CAP_ENACTOR_NAME", "ACCENT_NAME", "MONIKER_NAME", "SUB_PRONOUN", "OBJ_PRONOUN", 
		"POS_PRONOUN", "ABS_POS_PRONOUN", "CALLED_DBREF", "EXECUTOR_DBREF", "LOCATION_DBREF", 
		"LASTCOMMAND_BEFORE_EVAL", "LASTCOMMAND_AFTER_EVAL", "INVOCATION_DEPTH", 
		"CURRENT_ARG_COUNT", "ITEXT_NUM", "STEXT_NUM", "UNESCAPE", "ESCAPING_OTHER", 
		"CANSI", "ANSICHARACTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SharpMUSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SharpMUSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SharpMUSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SharpMUSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SingleCommandStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public SingleCommandStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleCommandString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleCommandString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleCommandStringContext singleCommandString() {
		SingleCommandStringContext _localctx = new SingleCommandStringContext(Context, State);
		EnterRule(_localctx, 0, RULE_singleCommandString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			command();
			State = 47;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandListContext commandList() {
			return GetRuleContext<CommandListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public CommandStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandStringContext commandString() {
		CommandStringContext _localctx = new CommandStringContext(Context, State);
		EnterRule(_localctx, 2, RULE_commandString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			commandList();
			State = 50;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(SharpMUSHParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(SharpMUSHParser.SEMICOLON, i);
		}
		public CommandListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandListContext commandList() {
		CommandListContext _localctx = new CommandListContext(Context, State);
		EnterRule(_localctx, 4, RULE_commandList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			command();
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 53;
				Match(SEMICOLON);
				State = 54;
				command();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FirstCommandMatchContext firstCommandMatch() {
			return GetRuleContext<FirstCommandMatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSPACE() { return GetToken(SharpMUSHParser.RSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 6, RULE_command);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 60;
				firstCommandMatch();
				State = 61;
				Match(RSPACE);
				State = 62;
				evaluationString();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 64;
				firstCommandMatch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstCommandMatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public FirstCommandMatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstCommandMatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstCommandMatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstCommandMatchContext firstCommandMatch() {
		FirstCommandMatchContext _localctx = new FirstCommandMatchContext(Context, State);
		EnterRule(_localctx, 8, RULE_firstCommandMatch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqsplitCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg() {
			return GetRuleContext<SingleCommandArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommaCommandArgsContext commaCommandArgs() {
			return GetRuleContext<CommaCommandArgsContext>(0);
		}
		public EqsplitCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqsplitCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqsplitCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqsplitCommandArgsContext eqsplitCommandArgs() {
		EqsplitCommandArgsContext _localctx = new EqsplitCommandArgsContext(Context, State);
		EnterRule(_localctx, 10, RULE_eqsplitCommandArgs);
		try {
			State = 74;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69;
				singleCommandArg();
				State = 70;
				Match(EQUALS);
				State = 71;
				commaCommandArgs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73;
				singleCommandArg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext[] singleCommandArg() {
			return GetRuleContexts<SingleCommandArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg(int i) {
			return GetRuleContext<SingleCommandArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SharpMUSHParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SharpMUSHParser.COMMA, i);
		}
		public CommaCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaCommandArgsContext commaCommandArgs() {
		CommaCommandArgsContext _localctx = new CommaCommandArgsContext(Context, State);
		EnterRule(_localctx, 12, RULE_commaCommandArgs);
		try {
			int _alt;
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76;
				singleCommandArg();
				State = 79;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 77;
						Match(COMMA);
						State = 78;
						singleCommandArg();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 81;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				singleCommandArg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleCommandArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public SingleCommandArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleCommandArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleCommandArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleCommandArgContext singleCommandArg() {
		SingleCommandArgContext _localctx = new SingleCommandArgContext(Context, State);
		EnterRule(_localctx, 14, RULE_singleCommandArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public PlainStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlainString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainStringContext plainString() {
		PlainStringContext _localctx = new PlainStringContext(Context, State);
		EnterRule(_localctx, 16, RULE_plainString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			evaluationString();
			State = 89;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SharpMUSHParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SharpMUSHParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext[] explicitEvaluationString() {
			return GetRuleContexts<ExplicitEvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString(int i) {
			return GetRuleContext<ExplicitEvaluationStringContext>(i);
		}
		public EvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluationStringContext evaluationString() {
		EvaluationStringContext _localctx = new EvaluationStringContext(Context, State);
		EnterRule(_localctx, 18, RULE_evaluationString);
		try {
			int _alt;
			State = 103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91;
				Match(OBRACE);
				State = 92;
				evaluationString();
				State = 93;
				Match(CBRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95;
				function();
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 96;
						explicitEvaluationString();
						}
						} 
					}
					State = 101;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 102;
				explicitEvaluationString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SharpMUSHParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext[] explicitEvaluationString() {
			return GetRuleContexts<ExplicitEvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString(int i) {
			return GetRuleContext<ExplicitEvaluationStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SharpMUSHParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringSubstitutionContext explicitEvaluationStringSubstitution() {
			return GetRuleContext<ExplicitEvaluationStringSubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringFunctionContext explicitEvaluationStringFunction() {
			return GetRuleContext<ExplicitEvaluationStringFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationTextContext explicitEvaluationText() {
			return GetRuleContext<ExplicitEvaluationTextContext>(0);
		}
		public ExplicitEvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringContext explicitEvaluationString() {
		ExplicitEvaluationStringContext _localctx = new ExplicitEvaluationStringContext(Context, State);
		EnterRule(_localctx, 20, RULE_explicitEvaluationString);
		try {
			int _alt;
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105;
				Match(OBRACE);
				State = 106;
				explicitEvaluationString();
				State = 107;
				Match(CBRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				explicitEvaluationStringSubstitution();
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 110;
						explicitEvaluationString();
						}
						} 
					}
					State = 115;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 116;
				explicitEvaluationStringFunction();
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 117;
						explicitEvaluationString();
						}
						} 
					}
					State = 122;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 123;
				explicitEvaluationText();
				State = 127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 124;
						explicitEvaluationString();
						}
						} 
					}
					State = 129;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringSubstitutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidSubstitutionContext validSubstitution() {
			return GetRuleContext<ValidSubstitutionContext>(0);
		}
		public ExplicitEvaluationStringSubstitutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationStringSubstitution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationStringSubstitution(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringSubstitutionContext explicitEvaluationStringSubstitution() {
		ExplicitEvaluationStringSubstitutionContext _localctx = new ExplicitEvaluationStringSubstitutionContext(Context, State);
		EnterRule(_localctx, 22, RULE_explicitEvaluationStringSubstitution);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(PERCENT);
			State = 133;
			validSubstitution();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(SharpMUSHParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(SharpMUSHParser.CBRACK, 0); }
		public ExplicitEvaluationStringFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationStringFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationStringFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringFunctionContext explicitEvaluationStringFunction() {
		ExplicitEvaluationStringFunctionContext _localctx = new ExplicitEvaluationStringFunctionContext(Context, State);
		EnterRule(_localctx, 24, RULE_explicitEvaluationStringFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(OBRACK);
			State = 136;
			function();
			State = 137;
			Match(CBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GenericTextContext genericText() {
			return GetRuleContext<GenericTextContext>(0);
		}
		public ExplicitEvaluationTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationTextContext explicitEvaluationText() {
		ExplicitEvaluationTextContext _localctx = new ExplicitEvaluationTextContext(Context, State);
		EnterRule(_localctx, 26, RULE_explicitEvaluationText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			genericText();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCHAR() { return GetToken(SharpMUSHParser.FUNCHAR, 0); }
		public FunNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunNameContext funName() {
		FunNameContext _localctx = new FunNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_funName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			Match(FUNCHAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunNameContext funName() {
			return GetRuleContext<FunNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(SharpMUSHParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(SharpMUSHParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunArgumentsContext funArguments() {
			return GetRuleContext<FunArgumentsContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 30, RULE_function);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				funName();
				State = 144;
				Match(OPAREN);
				State = 145;
				Match(CPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				funName();
				State = 148;
				Match(OPAREN);
				State = 149;
				funArguments();
				State = 150;
				Match(CPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext[] evaluationString() {
			return GetRuleContexts<EvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString(int i) {
			return GetRuleContext<EvaluationStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(SharpMUSHParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(SharpMUSHParser.COMMA, i);
		}
		public FunArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunArgumentsContext funArguments() {
		FunArgumentsContext _localctx = new FunArgumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_funArguments);
		int _la;
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				evaluationString();
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 155;
					Match(COMMA);
					State = 156;
					evaluationString();
					}
					}
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				evaluationString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidSubstitutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComplexSubstitutionSymbolContext complexSubstitutionSymbol() {
			return GetRuleContext<ComplexSubstitutionSymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionSymbolContext substitutionSymbol() {
			return GetRuleContext<SubstitutionSymbolContext>(0);
		}
		public ValidSubstitutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validSubstitution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidSubstitution(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidSubstitutionContext validSubstitution() {
		ValidSubstitutionContext _localctx = new ValidSubstitutionContext(Context, State);
		EnterRule(_localctx, 34, RULE_validSubstitution);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REG_STARTCARET:
			case REG_NUM:
			case VWX:
			case ITEXT_NUM:
			case STEXT_NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 164;
				complexSubstitutionSymbol();
				}
				break;
			case EQUALS:
			case PERCENT:
			case COLON:
			case ARG_NUM:
			case SPACE:
			case BLANKLINE:
			case TAB:
			case DBREF:
			case ENACTOR_NAME:
			case CAP_ENACTOR_NAME:
			case ACCENT_NAME:
			case MONIKER_NAME:
			case SUB_PRONOUN:
			case OBJ_PRONOUN:
			case POS_PRONOUN:
			case ABS_POS_PRONOUN:
			case CALLED_DBREF:
			case EXECUTOR_DBREF:
			case LOCATION_DBREF:
			case LASTCOMMAND_BEFORE_EVAL:
			case LASTCOMMAND_AFTER_EVAL:
			case INVOCATION_DEPTH:
			case CURRENT_ARG_COUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165;
				substitutionSymbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexSubstitutionSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG_STARTCARET() { return GetToken(SharpMUSHParser.REG_STARTCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CCARET() { return GetToken(SharpMUSHParser.CCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext[] explicitEvaluationString() {
			return GetRuleContexts<ExplicitEvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString(int i) {
			return GetRuleContext<ExplicitEvaluationStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG_NUM() { return GetToken(SharpMUSHParser.REG_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITEXT_NUM() { return GetToken(SharpMUSHParser.ITEXT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEXT_NUM() { return GetToken(SharpMUSHParser.STEXT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VWX() { return GetToken(SharpMUSHParser.VWX, 0); }
		public ComplexSubstitutionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexSubstitutionSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexSubstitutionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexSubstitutionSymbolContext complexSubstitutionSymbol() {
		ComplexSubstitutionSymbolContext _localctx = new ComplexSubstitutionSymbolContext(Context, State);
		EnterRule(_localctx, 36, RULE_complexSubstitutionSymbol);
		try {
			int _alt;
			State = 180;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REG_STARTCARET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				Match(REG_STARTCARET);
				State = 170;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 169;
						explicitEvaluationString();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 172;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 174;
				Match(CCARET);
				}
				break;
			case REG_NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				Match(REG_NUM);
				}
				break;
			case ITEXT_NUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				Match(ITEXT_NUM);
				}
				break;
			case STEXT_NUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 178;
				Match(STEXT_NUM);
				}
				break;
			case VWX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 179;
				Match(VWX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstitutionSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(SharpMUSHParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANKLINE() { return GetToken(SharpMUSHParser.BLANKLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(SharpMUSHParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SharpMUSHParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBREF() { return GetToken(SharpMUSHParser.DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENACTOR_NAME() { return GetToken(SharpMUSHParser.ENACTOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAP_ENACTOR_NAME() { return GetToken(SharpMUSHParser.CAP_ENACTOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCENT_NAME() { return GetToken(SharpMUSHParser.ACCENT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONIKER_NAME() { return GetToken(SharpMUSHParser.MONIKER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_PRONOUN() { return GetToken(SharpMUSHParser.SUB_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJ_PRONOUN() { return GetToken(SharpMUSHParser.OBJ_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POS_PRONOUN() { return GetToken(SharpMUSHParser.POS_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS_POS_PRONOUN() { return GetToken(SharpMUSHParser.ABS_POS_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG_NUM() { return GetToken(SharpMUSHParser.ARG_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED_DBREF() { return GetToken(SharpMUSHParser.CALLED_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTOR_DBREF() { return GetToken(SharpMUSHParser.EXECUTOR_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION_DBREF() { return GetToken(SharpMUSHParser.LOCATION_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTCOMMAND_BEFORE_EVAL() { return GetToken(SharpMUSHParser.LASTCOMMAND_BEFORE_EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTCOMMAND_AFTER_EVAL() { return GetToken(SharpMUSHParser.LASTCOMMAND_AFTER_EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOCATION_DEPTH() { return GetToken(SharpMUSHParser.INVOCATION_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ARG_COUNT() { return GetToken(SharpMUSHParser.CURRENT_ARG_COUNT, 0); }
		public SubstitutionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substitutionSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstitutionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstitutionSymbolContext substitutionSymbol() {
		SubstitutionSymbolContext _localctx = new SubstitutionSymbolContext(Context, State);
		EnterRule(_localctx, 38, RULE_substitutionSymbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8796084676608L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EscapedTextContext escapedText() {
			return GetRuleContext<EscapedTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnsiContext ansi() {
			return GetRuleContext<AnsiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER() { return GetToken(SharpMUSHParser.OTHER, 0); }
		public GenericTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTextContext genericText() {
		GenericTextContext _localctx = new GenericTextContext(Context, State);
		EnterRule(_localctx, 40, RULE_genericText);
		try {
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 184;
				escapedText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 185;
				ansi();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 186;
				Match(OTHER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 187;
				MatchWildcard();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SharpMUSHParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNESCAPE() { return GetToken(SharpMUSHParser.UNESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPING_OTHER() { return GetToken(SharpMUSHParser.ESCAPING_OTHER, 0); }
		public EscapedTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscapedText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapedTextContext escapedText() {
		EscapedTextContext _localctx = new EscapedTextContext(Context, State);
		EnterRule(_localctx, 42, RULE_escapedText);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190;
				Match(ESCAPE);
				State = 191;
				Match(UNESCAPE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192;
				Match(ESCAPE);
				State = 193;
				Match(ESCAPING_OTHER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnsiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OANSI() { return GetToken(SharpMUSHParser.OANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CANSI() { return GetToken(SharpMUSHParser.CANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSICHARACTER() { return GetToken(SharpMUSHParser.ANSICHARACTER, 0); }
		public AnsiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ansi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnsi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnsiContext ansi() {
		AnsiContext _localctx = new AnsiContext(Context, State);
		EnterRule(_localctx, 44, RULE_ansi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(OANSI);
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANSICHARACTER) {
				{
				State = 197;
				Match(ANSICHARACTER);
				}
			}

			State = 200;
			Match(CANSI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,48,203,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,5,2,56,8,2,10,2,12,2,59,
		9,2,1,3,1,3,1,3,1,3,1,3,3,3,66,8,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,3,5,75,
		8,5,1,6,1,6,1,6,4,6,80,8,6,11,6,12,6,81,1,6,3,6,85,8,6,1,7,1,7,1,8,1,8,
		1,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,98,8,9,10,9,12,9,101,9,9,1,9,3,9,104,8,
		9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,112,8,10,10,10,12,10,115,9,10,1,10,
		1,10,5,10,119,8,10,10,10,12,10,122,9,10,1,10,1,10,5,10,126,8,10,10,10,
		12,10,129,9,10,3,10,131,8,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,
		13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,153,8,15,
		1,16,1,16,1,16,4,16,158,8,16,11,16,12,16,159,1,16,3,16,163,8,16,1,17,1,
		17,3,17,167,8,17,1,18,1,18,4,18,171,8,18,11,18,12,18,172,1,18,1,18,1,18,
		1,18,1,18,1,18,3,18,181,8,18,1,19,1,19,1,20,1,20,1,20,1,20,3,20,189,8,
		20,1,21,1,21,1,21,1,21,3,21,195,8,21,1,22,1,22,3,22,199,8,22,1,22,1,22,
		1,22,6,81,99,113,120,127,172,0,23,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
		28,30,32,34,36,38,40,42,44,0,1,4,0,11,11,13,13,15,15,23,42,207,0,46,1,
		0,0,0,2,49,1,0,0,0,4,52,1,0,0,0,6,65,1,0,0,0,8,67,1,0,0,0,10,74,1,0,0,
		0,12,84,1,0,0,0,14,86,1,0,0,0,16,88,1,0,0,0,18,103,1,0,0,0,20,130,1,0,
		0,0,22,132,1,0,0,0,24,135,1,0,0,0,26,139,1,0,0,0,28,141,1,0,0,0,30,152,
		1,0,0,0,32,162,1,0,0,0,34,166,1,0,0,0,36,180,1,0,0,0,38,182,1,0,0,0,40,
		188,1,0,0,0,42,194,1,0,0,0,44,196,1,0,0,0,46,47,3,6,3,0,47,48,5,0,0,1,
		48,1,1,0,0,0,49,50,3,4,2,0,50,51,5,0,0,1,51,3,1,0,0,0,52,57,3,6,3,0,53,
		54,5,14,0,0,54,56,3,6,3,0,55,53,1,0,0,0,56,59,1,0,0,0,57,55,1,0,0,0,57,
		58,1,0,0,0,58,5,1,0,0,0,59,57,1,0,0,0,60,61,3,8,4,0,61,62,5,17,0,0,62,
		63,3,18,9,0,63,66,1,0,0,0,64,66,3,8,4,0,65,60,1,0,0,0,65,64,1,0,0,0,66,
		7,1,0,0,0,67,68,3,18,9,0,68,9,1,0,0,0,69,70,3,14,7,0,70,71,5,11,0,0,71,
		72,3,12,6,0,72,75,1,0,0,0,73,75,3,14,7,0,74,69,1,0,0,0,74,73,1,0,0,0,75,
		11,1,0,0,0,76,79,3,14,7,0,77,78,5,10,0,0,78,80,3,14,7,0,79,77,1,0,0,0,
		80,81,1,0,0,0,81,82,1,0,0,0,81,79,1,0,0,0,82,85,1,0,0,0,83,85,3,14,7,0,
		84,76,1,0,0,0,84,83,1,0,0,0,85,13,1,0,0,0,86,87,3,18,9,0,87,15,1,0,0,0,
		88,89,3,18,9,0,89,90,5,0,0,1,90,17,1,0,0,0,91,92,5,5,0,0,92,93,3,18,9,
		0,93,94,5,6,0,0,94,104,1,0,0,0,95,99,3,30,15,0,96,98,3,20,10,0,97,96,1,
		0,0,0,98,101,1,0,0,0,99,100,1,0,0,0,99,97,1,0,0,0,100,104,1,0,0,0,101,
		99,1,0,0,0,102,104,3,20,10,0,103,91,1,0,0,0,103,95,1,0,0,0,103,102,1,0,
		0,0,104,19,1,0,0,0,105,106,5,5,0,0,106,107,3,20,10,0,107,108,5,6,0,0,108,
		131,1,0,0,0,109,113,3,22,11,0,110,112,3,20,10,0,111,110,1,0,0,0,112,115,
		1,0,0,0,113,114,1,0,0,0,113,111,1,0,0,0,114,131,1,0,0,0,115,113,1,0,0,
		0,116,120,3,24,12,0,117,119,3,20,10,0,118,117,1,0,0,0,119,122,1,0,0,0,
		120,121,1,0,0,0,120,118,1,0,0,0,121,131,1,0,0,0,122,120,1,0,0,0,123,127,
		3,26,13,0,124,126,3,20,10,0,125,124,1,0,0,0,126,129,1,0,0,0,127,128,1,
		0,0,0,127,125,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,130,105,1,0,0,0,
		130,109,1,0,0,0,130,116,1,0,0,0,130,123,1,0,0,0,131,21,1,0,0,0,132,133,
		5,13,0,0,133,134,3,34,17,0,134,23,1,0,0,0,135,136,5,3,0,0,136,137,3,30,
		15,0,137,138,5,4,0,0,138,25,1,0,0,0,139,140,3,40,20,0,140,27,1,0,0,0,141,
		142,5,18,0,0,142,29,1,0,0,0,143,144,3,28,14,0,144,145,5,1,0,0,145,146,
		5,7,0,0,146,153,1,0,0,0,147,148,3,28,14,0,148,149,5,1,0,0,149,150,3,32,
		16,0,150,151,5,7,0,0,151,153,1,0,0,0,152,143,1,0,0,0,152,147,1,0,0,0,153,
		31,1,0,0,0,154,157,3,18,9,0,155,156,5,10,0,0,156,158,3,18,9,0,157,155,
		1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,163,1,0,0,
		0,161,163,3,18,9,0,162,154,1,0,0,0,162,161,1,0,0,0,163,33,1,0,0,0,164,
		167,3,36,18,0,165,167,3,38,19,0,166,164,1,0,0,0,166,165,1,0,0,0,167,35,
		1,0,0,0,168,170,5,20,0,0,169,171,3,20,10,0,170,169,1,0,0,0,171,172,1,0,
		0,0,172,173,1,0,0,0,172,170,1,0,0,0,173,174,1,0,0,0,174,175,5,9,0,0,175,
		181,1,0,0,0,176,181,5,21,0,0,177,181,5,43,0,0,178,181,5,44,0,0,179,181,
		5,22,0,0,180,168,1,0,0,0,180,176,1,0,0,0,180,177,1,0,0,0,180,178,1,0,0,
		0,180,179,1,0,0,0,181,37,1,0,0,0,182,183,7,0,0,0,183,39,1,0,0,0,184,189,
		3,42,21,0,185,189,3,44,22,0,186,189,5,19,0,0,187,189,9,0,0,0,188,184,1,
		0,0,0,188,185,1,0,0,0,188,186,1,0,0,0,188,187,1,0,0,0,189,41,1,0,0,0,190,
		191,5,2,0,0,191,195,5,45,0,0,192,193,5,2,0,0,193,195,5,46,0,0,194,190,
		1,0,0,0,194,192,1,0,0,0,195,43,1,0,0,0,196,198,5,16,0,0,197,199,5,48,0,
		0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,201,5,47,0,0,201,
		45,1,0,0,0,20,57,65,74,81,84,99,103,113,120,127,130,152,159,162,166,172,
		180,188,194,198
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
