//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/SharpMUSH/SharpMUSH.Generated/SharpMUSHParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SharpMUSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ESCAPE=1, OBRACK=2, CBRACK=3, OBRACE=4, CBRACE=5, CPAREN=6, CCARET=7, 
		COMMAWS=8, EQUALS=9, PERCENT=10, SEMICOLON=11, COLON=12, OANSI=13, RSPACE=14, 
		FUNCHAR=15, OTHER=16, REG_STARTCARET=17, REG_NUM=18, VWX=19, ARG_NUM=20, 
		SPACE=21, BLANKLINE=22, TAB=23, DBREF=24, ENACTOR_NAME=25, CAP_ENACTOR_NAME=26, 
		ACCENT_NAME=27, MONIKER_NAME=28, SUB_PRONOUN=29, OBJ_PRONOUN=30, POS_PRONOUN=31, 
		ABS_POS_PRONOUN=32, CALLED_DBREF=33, EXECUTOR_DBREF=34, LOCATION_DBREF=35, 
		LASTCOMMAND_BEFORE_EVAL=36, LASTCOMMAND_AFTER_EVAL=37, INVOCATION_DEPTH=38, 
		CURRENT_ARG_COUNT=39, ITEXT_NUM=40, STEXT_NUM=41, OTHER_SUB=42, ANY=43, 
		CANSI=44, ANSICHARACTER=45;
	public const int
		RULE_startSingleCommandString = 0, RULE_startCommandString = 1, RULE_startPlainCommaCommandArgs = 2, 
		RULE_startEqSplitCommandArgs = 3, RULE_startEqSplitCommand = 4, RULE_startPlainSingleCommandArg = 5, 
		RULE_startPlainString = 6, RULE_commandList = 7, RULE_command = 8, RULE_firstCommandMatch = 9, 
		RULE_commaCommandArgs = 10, RULE_singleCommandArg = 11, RULE_evaluationString = 12, 
		RULE_explicitEvaluationString = 13, RULE_explicitEvaluationStringContentsConcatenated = 14, 
		RULE_funName = 15, RULE_function = 16, RULE_funArguments = 17, RULE_validSubstitution = 18, 
		RULE_complexSubstitutionSymbol = 19, RULE_substitutionSymbol = 20, RULE_genericText = 21, 
		RULE_beginGenericText = 22, RULE_escapedText = 23, RULE_ansi = 24;
	public static readonly string[] ruleNames = {
		"startSingleCommandString", "startCommandString", "startPlainCommaCommandArgs", 
		"startEqSplitCommandArgs", "startEqSplitCommand", "startPlainSingleCommandArg", 
		"startPlainString", "commandList", "command", "firstCommandMatch", "commaCommandArgs", 
		"singleCommandArg", "evaluationString", "explicitEvaluationString", "explicitEvaluationStringContentsConcatenated", 
		"funName", "function", "funArguments", "validSubstitution", "complexSubstitutionSymbol", 
		"substitutionSymbol", "genericText", "beginGenericText", "escapedText", 
		"ansi"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\'", "'['", "']'", "'{'", "'}'", "')'", "'>'", null, "'='", "'%'", 
		"';'", "':'", "'\\u001B'", "' '", null, null, null, null, null, null, 
		null, null, null, "'#'", "'n'", "'N'", "'~'", null, null, null, null, 
		null, "'@'", "'!'", null, null, null, "'?'", "'+'", null, null, null, 
		null, "'m'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ESCAPE", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "CPAREN", "CCARET", 
		"COMMAWS", "EQUALS", "PERCENT", "SEMICOLON", "COLON", "OANSI", "RSPACE", 
		"FUNCHAR", "OTHER", "REG_STARTCARET", "REG_NUM", "VWX", "ARG_NUM", "SPACE", 
		"BLANKLINE", "TAB", "DBREF", "ENACTOR_NAME", "CAP_ENACTOR_NAME", "ACCENT_NAME", 
		"MONIKER_NAME", "SUB_PRONOUN", "OBJ_PRONOUN", "POS_PRONOUN", "ABS_POS_PRONOUN", 
		"CALLED_DBREF", "EXECUTOR_DBREF", "LOCATION_DBREF", "LASTCOMMAND_BEFORE_EVAL", 
		"LASTCOMMAND_AFTER_EVAL", "INVOCATION_DEPTH", "CURRENT_ARG_COUNT", "ITEXT_NUM", 
		"STEXT_NUM", "OTHER_SUB", "ANY", "CANSI", "ANSICHARACTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SharpMUSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SharpMUSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    private int inFunction = 0;
	    private bool inCommandMatch = false;
	    private bool inCommandList = false;
	    private bool lookingForCommandArgCommas = false;
	    private bool lookingForCommandArgEquals = false;
	    private bool lookingForRegisterCaret = false;

		public SharpMUSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SharpMUSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartSingleCommandStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartSingleCommandStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startSingleCommandString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartSingleCommandString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartSingleCommandStringContext startSingleCommandString() {
		StartSingleCommandStringContext _localctx = new StartSingleCommandStringContext(Context, State);
		EnterRule(_localctx, 0, RULE_startSingleCommandString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			command();
			State = 51;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartCommandStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandListContext commandList() {
			return GetRuleContext<CommandListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartCommandStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startCommandString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartCommandString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartCommandStringContext startCommandString() {
		StartCommandStringContext _localctx = new StartCommandStringContext(Context, State);
		EnterRule(_localctx, 2, RULE_startCommandString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			inCommandList = true;
			State = 54;
			commandList();
			State = 55;
			Match(Eof);
			inCommandList = false;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPlainCommaCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommaCommandArgsContext commaCommandArgs() {
			return GetRuleContext<CommaCommandArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartPlainCommaCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPlainCommaCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPlainCommaCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPlainCommaCommandArgsContext startPlainCommaCommandArgs() {
		StartPlainCommaCommandArgsContext _localctx = new StartPlainCommaCommandArgsContext(Context, State);
		EnterRule(_localctx, 4, RULE_startPlainCommaCommandArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			commaCommandArgs();
			State = 59;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartEqSplitCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg() {
			return GetRuleContext<SingleCommandArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommaCommandArgsContext commaCommandArgs() {
			return GetRuleContext<CommaCommandArgsContext>(0);
		}
		public StartEqSplitCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startEqSplitCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartEqSplitCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartEqSplitCommandArgsContext startEqSplitCommandArgs() {
		StartEqSplitCommandArgsContext _localctx = new StartEqSplitCommandArgsContext(Context, State);
		EnterRule(_localctx, 6, RULE_startEqSplitCommandArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			singleCommandArg();
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 62;
				Match(EQUALS);
				State = 63;
				commaCommandArgs();
				}
			}

			State = 66;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartEqSplitCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext[] singleCommandArg() {
			return GetRuleContexts<SingleCommandArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg(int i) {
			return GetRuleContext<SingleCommandArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		public StartEqSplitCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startEqSplitCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartEqSplitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartEqSplitCommandContext startEqSplitCommand() {
		StartEqSplitCommandContext _localctx = new StartEqSplitCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_startEqSplitCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			lookingForCommandArgEquals = true;
			State = 69;
			singleCommandArg();
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 70;
				Match(EQUALS);
				lookingForCommandArgEquals = false;
				State = 72;
				singleCommandArg();
				}
			}

			State = 75;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPlainSingleCommandArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg() {
			return GetRuleContext<SingleCommandArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartPlainSingleCommandArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPlainSingleCommandArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPlainSingleCommandArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPlainSingleCommandArgContext startPlainSingleCommandArg() {
		StartPlainSingleCommandArgContext _localctx = new StartPlainSingleCommandArgContext(Context, State);
		EnterRule(_localctx, 10, RULE_startPlainSingleCommandArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			singleCommandArg();
			State = 78;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPlainStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartPlainStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPlainString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPlainString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPlainStringContext startPlainString() {
		StartPlainStringContext _localctx = new StartPlainStringContext(Context, State);
		EnterRule(_localctx, 12, RULE_startPlainString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			evaluationString();
			State = 81;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(SharpMUSHParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(SharpMUSHParser.SEMICOLON, i);
		}
		public CommandListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandListContext commandList() {
		CommandListContext _localctx = new CommandListContext(Context, State);
		EnterRule(_localctx, 14, RULE_commandList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			command();
			State = 88;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 84;
					Match(SEMICOLON);
					State = 85;
					command();
					}
					} 
				}
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FirstCommandMatchContext firstCommandMatch() {
			return GetRuleContext<FirstCommandMatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSPACE() { return GetToken(SharpMUSHParser.RSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 16, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			firstCommandMatch();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RSPACE) {
				{
				State = 92;
				Match(RSPACE);
				inCommandMatch = false;
				State = 94;
				evaluationString();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstCommandMatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public FirstCommandMatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstCommandMatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstCommandMatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstCommandMatchContext firstCommandMatch() {
		FirstCommandMatchContext _localctx = new FirstCommandMatchContext(Context, State);
		EnterRule(_localctx, 18, RULE_firstCommandMatch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			inCommandMatch = true;
			State = 98;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext[] singleCommandArg() {
			return GetRuleContexts<SingleCommandArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg(int i) {
			return GetRuleContext<SingleCommandArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAWS() { return GetTokens(SharpMUSHParser.COMMAWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAWS(int i) {
			return GetToken(SharpMUSHParser.COMMAWS, i);
		}
		public CommaCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaCommandArgsContext commaCommandArgs() {
		CommaCommandArgsContext _localctx = new CommaCommandArgsContext(Context, State);
		EnterRule(_localctx, 20, RULE_commaCommandArgs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			lookingForCommandArgCommas = true;
			State = 101;
			singleCommandArg();
			State = 106;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 102;
					Match(COMMAWS);
					State = 103;
					singleCommandArg();
					}
					} 
				}
				State = 108;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			lookingForCommandArgCommas = false;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleCommandArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public SingleCommandArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleCommandArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleCommandArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleCommandArgContext singleCommandArg() {
		SingleCommandArgContext _localctx = new SingleCommandArgContext(Context, State);
		EnterRule(_localctx, 22, RULE_singleCommandArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString() {
			return GetRuleContext<ExplicitEvaluationStringContext>(0);
		}
		public EvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluationStringContext evaluationString() {
		EvaluationStringContext _localctx = new EvaluationStringContext(Context, State);
		EnterRule(_localctx, 24, RULE_evaluationString);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				function();
				State = 115;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 114;
					explicitEvaluationString();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				explicitEvaluationString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SharpMUSHParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString() {
			return GetRuleContext<ExplicitEvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SharpMUSHParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContentsConcatenatedContext explicitEvaluationStringContentsConcatenated() {
			return GetRuleContext<ExplicitEvaluationStringContentsConcatenatedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(SharpMUSHParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(SharpMUSHParser.CBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidSubstitutionContext validSubstitution() {
			return GetRuleContext<ValidSubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginGenericTextContext beginGenericText() {
			return GetRuleContext<BeginGenericTextContext>(0);
		}
		public ExplicitEvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringContext explicitEvaluationString() {
		ExplicitEvaluationStringContext _localctx = new ExplicitEvaluationStringContext(Context, State);
		EnterRule(_localctx, 26, RULE_explicitEvaluationString);
		try {
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120;
				Match(OBRACE);
				State = 121;
				explicitEvaluationString();
				State = 122;
				Match(CBRACE);
				State = 124;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 123;
					explicitEvaluationStringContentsConcatenated();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				Match(OBRACK);
				State = 127;
				evaluationString();
				State = 128;
				Match(CBRACK);
				State = 130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 129;
					explicitEvaluationStringContentsConcatenated();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132;
				Match(PERCENT);
				State = 133;
				validSubstitution();
				State = 135;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 134;
					explicitEvaluationStringContentsConcatenated();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 137;
				beginGenericText();
				State = 139;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
				case 1:
					{
					State = 138;
					explicitEvaluationStringContentsConcatenated();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringContentsConcatenatedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SharpMUSHParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString() {
			return GetRuleContext<ExplicitEvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SharpMUSHParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContentsConcatenatedContext[] explicitEvaluationStringContentsConcatenated() {
			return GetRuleContexts<ExplicitEvaluationStringContentsConcatenatedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContentsConcatenatedContext explicitEvaluationStringContentsConcatenated(int i) {
			return GetRuleContext<ExplicitEvaluationStringContentsConcatenatedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(SharpMUSHParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(SharpMUSHParser.CBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidSubstitutionContext validSubstitution() {
			return GetRuleContext<ValidSubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTextContext[] genericText() {
			return GetRuleContexts<GenericTextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTextContext genericText(int i) {
			return GetRuleContext<GenericTextContext>(i);
		}
		public ExplicitEvaluationStringContentsConcatenatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationStringContentsConcatenated; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationStringContentsConcatenated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringContentsConcatenatedContext explicitEvaluationStringContentsConcatenated() {
		ExplicitEvaluationStringContentsConcatenatedContext _localctx = new ExplicitEvaluationStringContentsConcatenatedContext(Context, State);
		EnterRule(_localctx, 28, RULE_explicitEvaluationStringContentsConcatenated);
		try {
			int _alt;
			State = 180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 143;
				Match(OBRACE);
				State = 144;
				explicitEvaluationString();
				State = 145;
				Match(CBRACE);
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 146;
						explicitEvaluationStringContentsConcatenated();
						}
						} 
					}
					State = 151;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152;
				Match(OBRACK);
				State = 153;
				evaluationString();
				State = 154;
				Match(CBRACK);
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 155;
						explicitEvaluationStringContentsConcatenated();
						}
						} 
					}
					State = 160;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 161;
				Match(PERCENT);
				State = 162;
				validSubstitution();
				State = 166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 163;
						explicitEvaluationStringContentsConcatenated();
						}
						} 
					}
					State = 168;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 170;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 169;
						genericText();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 172;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 177;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 174;
						explicitEvaluationStringContentsConcatenated();
						}
						} 
					}
					State = 179;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCHAR() { return GetToken(SharpMUSHParser.FUNCHAR, 0); }
		public FunNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunNameContext funName() {
		FunNameContext _localctx = new FunNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_funName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(FUNCHAR);
			++inFunction;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunNameContext funName() {
			return GetRuleContext<FunNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(SharpMUSHParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunArgumentsContext funArguments() {
			return GetRuleContext<FunArgumentsContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			funName();
			State = 187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 186;
				funArguments();
				}
				break;
			}
			State = 189;
			Match(CPAREN);
			--inFunction;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext[] evaluationString() {
			return GetRuleContexts<EvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString(int i) {
			return GetRuleContext<EvaluationStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAWS() { return GetTokens(SharpMUSHParser.COMMAWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAWS(int i) {
			return GetToken(SharpMUSHParser.COMMAWS, i);
		}
		public FunArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunArgumentsContext funArguments() {
		FunArgumentsContext _localctx = new FunArgumentsContext(Context, State);
		EnterRule(_localctx, 34, RULE_funArguments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			evaluationString();
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 193;
					Match(COMMAWS);
					State = 194;
					evaluationString();
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidSubstitutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComplexSubstitutionSymbolContext complexSubstitutionSymbol() {
			return GetRuleContext<ComplexSubstitutionSymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionSymbolContext substitutionSymbol() {
			return GetRuleContext<SubstitutionSymbolContext>(0);
		}
		public ValidSubstitutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validSubstitution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidSubstitution(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidSubstitutionContext validSubstitution() {
		ValidSubstitutionContext _localctx = new ValidSubstitutionContext(Context, State);
		EnterRule(_localctx, 36, RULE_validSubstitution);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REG_STARTCARET:
			case REG_NUM:
			case VWX:
			case ITEXT_NUM:
			case STEXT_NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				complexSubstitutionSymbol();
				}
				break;
			case EQUALS:
			case PERCENT:
			case COLON:
			case ARG_NUM:
			case SPACE:
			case BLANKLINE:
			case TAB:
			case DBREF:
			case ENACTOR_NAME:
			case CAP_ENACTOR_NAME:
			case ACCENT_NAME:
			case MONIKER_NAME:
			case SUB_PRONOUN:
			case OBJ_PRONOUN:
			case POS_PRONOUN:
			case ABS_POS_PRONOUN:
			case CALLED_DBREF:
			case EXECUTOR_DBREF:
			case LOCATION_DBREF:
			case LASTCOMMAND_BEFORE_EVAL:
			case LASTCOMMAND_AFTER_EVAL:
			case INVOCATION_DEPTH:
			case CURRENT_ARG_COUNT:
			case OTHER_SUB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201;
				substitutionSymbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexSubstitutionSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG_STARTCARET() { return GetToken(SharpMUSHParser.REG_STARTCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CCARET() { return GetToken(SharpMUSHParser.CCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG_NUM() { return GetToken(SharpMUSHParser.REG_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITEXT_NUM() { return GetToken(SharpMUSHParser.ITEXT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEXT_NUM() { return GetToken(SharpMUSHParser.STEXT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VWX() { return GetToken(SharpMUSHParser.VWX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext[] explicitEvaluationString() {
			return GetRuleContexts<ExplicitEvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString(int i) {
			return GetRuleContext<ExplicitEvaluationStringContext>(i);
		}
		public ComplexSubstitutionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexSubstitutionSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexSubstitutionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexSubstitutionSymbolContext complexSubstitutionSymbol() {
		ComplexSubstitutionSymbolContext _localctx = new ComplexSubstitutionSymbolContext(Context, State);
		EnterRule(_localctx, 38, RULE_complexSubstitutionSymbol);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REG_STARTCARET:
				{
				State = 204;
				Match(REG_STARTCARET);
				lookingForRegisterCaret = true;
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 206;
						explicitEvaluationString();
						}
						} 
					}
					State = 211;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				}
				State = 212;
				Match(CCARET);
				lookingForRegisterCaret = false;
				            
				}
				break;
			case REG_NUM:
				{
				State = 214;
				Match(REG_NUM);
				}
				break;
			case ITEXT_NUM:
				{
				State = 215;
				Match(ITEXT_NUM);
				}
				break;
			case STEXT_NUM:
				{
				State = 216;
				Match(STEXT_NUM);
				}
				break;
			case VWX:
				{
				State = 217;
				Match(VWX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstitutionSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(SharpMUSHParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANKLINE() { return GetToken(SharpMUSHParser.BLANKLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(SharpMUSHParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SharpMUSHParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBREF() { return GetToken(SharpMUSHParser.DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENACTOR_NAME() { return GetToken(SharpMUSHParser.ENACTOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAP_ENACTOR_NAME() { return GetToken(SharpMUSHParser.CAP_ENACTOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCENT_NAME() { return GetToken(SharpMUSHParser.ACCENT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONIKER_NAME() { return GetToken(SharpMUSHParser.MONIKER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_PRONOUN() { return GetToken(SharpMUSHParser.SUB_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJ_PRONOUN() { return GetToken(SharpMUSHParser.OBJ_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POS_PRONOUN() { return GetToken(SharpMUSHParser.POS_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS_POS_PRONOUN() { return GetToken(SharpMUSHParser.ABS_POS_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG_NUM() { return GetToken(SharpMUSHParser.ARG_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED_DBREF() { return GetToken(SharpMUSHParser.CALLED_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTOR_DBREF() { return GetToken(SharpMUSHParser.EXECUTOR_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION_DBREF() { return GetToken(SharpMUSHParser.LOCATION_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTCOMMAND_BEFORE_EVAL() { return GetToken(SharpMUSHParser.LASTCOMMAND_BEFORE_EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTCOMMAND_AFTER_EVAL() { return GetToken(SharpMUSHParser.LASTCOMMAND_AFTER_EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOCATION_DEPTH() { return GetToken(SharpMUSHParser.INVOCATION_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ARG_COUNT() { return GetToken(SharpMUSHParser.CURRENT_ARG_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER_SUB() { return GetToken(SharpMUSHParser.OTHER_SUB, 0); }
		public SubstitutionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substitutionSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstitutionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstitutionSymbolContext substitutionSymbol() {
		SubstitutionSymbolContext _localctx = new SubstitutionSymbolContext(Context, State);
		EnterRule(_localctx, 40, RULE_substitutionSymbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 5497557095936L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BeginGenericTextContext beginGenericText() {
			return GetRuleContext<BeginGenericTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCHAR() { return GetToken(SharpMUSHParser.FUNCHAR, 0); }
		public GenericTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTextContext genericText() {
		GenericTextContext _localctx = new GenericTextContext(Context, State);
		EnterRule(_localctx, 42, RULE_genericText);
		try {
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222;
				beginGenericText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223;
				Match(FUNCHAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginGenericTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EscapedTextContext escapedText() {
			return GetRuleContext<EscapedTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnsiContext ansi() {
			return GetRuleContext<AnsiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(SharpMUSHParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSPACE() { return GetToken(SharpMUSHParser.RSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SharpMUSHParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAWS() { return GetToken(SharpMUSHParser.COMMAWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CCARET() { return GetToken(SharpMUSHParser.CCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SharpMUSHParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OTHER() { return GetTokens(SharpMUSHParser.OTHER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER(int i) {
			return GetToken(SharpMUSHParser.OTHER, i);
		}
		public BeginGenericTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginGenericText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginGenericText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginGenericTextContext beginGenericText() {
		BeginGenericTextContext _localctx = new BeginGenericTextContext(Context, State);
		EnterRule(_localctx, 44, RULE_beginGenericText);
		try {
			int _alt;
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				escapedText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				ansi();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 228;
				if (!(inFunction == 0)) throw new FailedPredicateException(this, "inFunction == 0");
				State = 229;
				Match(CPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 230;
				if (!(!inCommandMatch)) throw new FailedPredicateException(this, "!inCommandMatch");
				State = 231;
				Match(RSPACE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 232;
				if (!(!inCommandList)) throw new FailedPredicateException(this, "!inCommandList");
				State = 233;
				Match(SEMICOLON);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 234;
				if (!(!lookingForCommandArgCommas && inFunction == 0)) throw new FailedPredicateException(this, "!lookingForCommandArgCommas && inFunction == 0");
				State = 235;
				Match(COMMAWS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 236;
				if (!(!lookingForCommandArgEquals)) throw new FailedPredicateException(this, "!lookingForCommandArgEquals");
				State = 237;
				Match(EQUALS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 238;
				if (!(!lookingForRegisterCaret)) throw new FailedPredicateException(this, "!lookingForRegisterCaret");
				State = 239;
				Match(CCARET);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 246;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COLON:
					{
					State = 240;
					Match(COLON);
					}
					break;
				case OTHER:
					{
					State = 242;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 241;
							Match(OTHER);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 244;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SharpMUSHParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(SharpMUSHParser.ANY, 0); }
		public EscapedTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscapedText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapedTextContext escapedText() {
		EscapedTextContext _localctx = new EscapedTextContext(Context, State);
		EnterRule(_localctx, 46, RULE_escapedText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(ESCAPE);
			State = 251;
			Match(ANY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnsiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OANSI() { return GetToken(SharpMUSHParser.OANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CANSI() { return GetToken(SharpMUSHParser.CANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSICHARACTER() { return GetToken(SharpMUSHParser.ANSICHARACTER, 0); }
		public AnsiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ansi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnsi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnsiContext ansi() {
		AnsiContext _localctx = new AnsiContext(Context, State);
		EnterRule(_localctx, 48, RULE_ansi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			Match(OANSI);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANSICHARACTER) {
				{
				State = 254;
				Match(ANSICHARACTER);
				}
			}

			State = 257;
			Match(CANSI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 22: return beginGenericText_sempred((BeginGenericTextContext)_localctx, predIndex);
		}
		return true;
	}
	private bool beginGenericText_sempred(BeginGenericTextContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return inFunction == 0;
		case 1: return !inCommandMatch;
		case 2: return !inCommandList;
		case 3: return !lookingForCommandArgCommas && inFunction == 0;
		case 4: return !lookingForCommandArgEquals;
		case 5: return !lookingForRegisterCaret;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,45,260,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
		1,2,1,3,1,3,1,3,3,3,65,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,74,8,4,1,4,
		1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,5,7,87,8,7,10,7,12,7,90,9,7,1,
		8,1,8,1,8,1,8,3,8,96,8,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,5,10,105,8,10,
		10,10,12,10,108,9,10,1,10,1,10,1,11,1,11,1,12,1,12,3,12,116,8,12,1,12,
		3,12,119,8,12,1,13,1,13,1,13,1,13,3,13,125,8,13,1,13,1,13,1,13,1,13,3,
		13,131,8,13,1,13,1,13,1,13,3,13,136,8,13,1,13,1,13,3,13,140,8,13,3,13,
		142,8,13,1,14,1,14,1,14,1,14,5,14,148,8,14,10,14,12,14,151,9,14,1,14,1,
		14,1,14,1,14,5,14,157,8,14,10,14,12,14,160,9,14,1,14,1,14,1,14,5,14,165,
		8,14,10,14,12,14,168,9,14,1,14,4,14,171,8,14,11,14,12,14,172,1,14,5,14,
		176,8,14,10,14,12,14,179,9,14,3,14,181,8,14,1,15,1,15,1,15,1,16,1,16,3,
		16,188,8,16,1,16,1,16,1,16,1,17,1,17,1,17,5,17,196,8,17,10,17,12,17,199,
		9,17,1,18,1,18,3,18,203,8,18,1,19,1,19,1,19,5,19,208,8,19,10,19,12,19,
		211,9,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,219,8,19,1,20,1,20,1,21,1,
		21,3,21,225,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,22,4,22,243,8,22,11,22,12,22,244,3,22,247,8,22,3,
		22,249,8,22,1,23,1,23,1,23,1,24,1,24,3,24,256,8,24,1,24,1,24,1,24,4,88,
		106,197,209,0,25,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
		40,42,44,46,48,0,1,4,0,9,10,12,12,20,39,42,42,276,0,50,1,0,0,0,2,53,1,
		0,0,0,4,58,1,0,0,0,6,61,1,0,0,0,8,68,1,0,0,0,10,77,1,0,0,0,12,80,1,0,0,
		0,14,83,1,0,0,0,16,91,1,0,0,0,18,97,1,0,0,0,20,100,1,0,0,0,22,111,1,0,
		0,0,24,118,1,0,0,0,26,141,1,0,0,0,28,180,1,0,0,0,30,182,1,0,0,0,32,185,
		1,0,0,0,34,192,1,0,0,0,36,202,1,0,0,0,38,218,1,0,0,0,40,220,1,0,0,0,42,
		224,1,0,0,0,44,248,1,0,0,0,46,250,1,0,0,0,48,253,1,0,0,0,50,51,3,16,8,
		0,51,52,5,0,0,1,52,1,1,0,0,0,53,54,6,1,-1,0,54,55,3,14,7,0,55,56,5,0,0,
		1,56,57,6,1,-1,0,57,3,1,0,0,0,58,59,3,20,10,0,59,60,5,0,0,1,60,5,1,0,0,
		0,61,64,3,22,11,0,62,63,5,9,0,0,63,65,3,20,10,0,64,62,1,0,0,0,64,65,1,
		0,0,0,65,66,1,0,0,0,66,67,5,0,0,1,67,7,1,0,0,0,68,69,6,4,-1,0,69,73,3,
		22,11,0,70,71,5,9,0,0,71,72,6,4,-1,0,72,74,3,22,11,0,73,70,1,0,0,0,73,
		74,1,0,0,0,74,75,1,0,0,0,75,76,5,0,0,1,76,9,1,0,0,0,77,78,3,22,11,0,78,
		79,5,0,0,1,79,11,1,0,0,0,80,81,3,24,12,0,81,82,5,0,0,1,82,13,1,0,0,0,83,
		88,3,16,8,0,84,85,5,11,0,0,85,87,3,16,8,0,86,84,1,0,0,0,87,90,1,0,0,0,
		88,89,1,0,0,0,88,86,1,0,0,0,89,15,1,0,0,0,90,88,1,0,0,0,91,95,3,18,9,0,
		92,93,5,14,0,0,93,94,6,8,-1,0,94,96,3,24,12,0,95,92,1,0,0,0,95,96,1,0,
		0,0,96,17,1,0,0,0,97,98,6,9,-1,0,98,99,3,24,12,0,99,19,1,0,0,0,100,101,
		6,10,-1,0,101,106,3,22,11,0,102,103,5,8,0,0,103,105,3,22,11,0,104,102,
		1,0,0,0,105,108,1,0,0,0,106,107,1,0,0,0,106,104,1,0,0,0,107,109,1,0,0,
		0,108,106,1,0,0,0,109,110,6,10,-1,0,110,21,1,0,0,0,111,112,3,24,12,0,112,
		23,1,0,0,0,113,115,3,32,16,0,114,116,3,26,13,0,115,114,1,0,0,0,115,116,
		1,0,0,0,116,119,1,0,0,0,117,119,3,26,13,0,118,113,1,0,0,0,118,117,1,0,
		0,0,119,25,1,0,0,0,120,121,5,4,0,0,121,122,3,26,13,0,122,124,5,5,0,0,123,
		125,3,28,14,0,124,123,1,0,0,0,124,125,1,0,0,0,125,142,1,0,0,0,126,127,
		5,2,0,0,127,128,3,24,12,0,128,130,5,3,0,0,129,131,3,28,14,0,130,129,1,
		0,0,0,130,131,1,0,0,0,131,142,1,0,0,0,132,133,5,10,0,0,133,135,3,36,18,
		0,134,136,3,28,14,0,135,134,1,0,0,0,135,136,1,0,0,0,136,142,1,0,0,0,137,
		139,3,44,22,0,138,140,3,28,14,0,139,138,1,0,0,0,139,140,1,0,0,0,140,142,
		1,0,0,0,141,120,1,0,0,0,141,126,1,0,0,0,141,132,1,0,0,0,141,137,1,0,0,
		0,142,27,1,0,0,0,143,144,5,4,0,0,144,145,3,26,13,0,145,149,5,5,0,0,146,
		148,3,28,14,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,
		1,0,0,0,150,181,1,0,0,0,151,149,1,0,0,0,152,153,5,2,0,0,153,154,3,24,12,
		0,154,158,5,3,0,0,155,157,3,28,14,0,156,155,1,0,0,0,157,160,1,0,0,0,158,
		156,1,0,0,0,158,159,1,0,0,0,159,181,1,0,0,0,160,158,1,0,0,0,161,162,5,
		10,0,0,162,166,3,36,18,0,163,165,3,28,14,0,164,163,1,0,0,0,165,168,1,0,
		0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,181,1,0,0,0,168,166,1,0,0,0,169,
		171,3,42,21,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,1,0,0,0,172,173,
		1,0,0,0,173,177,1,0,0,0,174,176,3,28,14,0,175,174,1,0,0,0,176,179,1,0,
		0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,180,
		143,1,0,0,0,180,152,1,0,0,0,180,161,1,0,0,0,180,170,1,0,0,0,181,29,1,0,
		0,0,182,183,5,15,0,0,183,184,6,15,-1,0,184,31,1,0,0,0,185,187,3,30,15,
		0,186,188,3,34,17,0,187,186,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,
		190,5,6,0,0,190,191,6,16,-1,0,191,33,1,0,0,0,192,197,3,24,12,0,193,194,
		5,8,0,0,194,196,3,24,12,0,195,193,1,0,0,0,196,199,1,0,0,0,197,198,1,0,
		0,0,197,195,1,0,0,0,198,35,1,0,0,0,199,197,1,0,0,0,200,203,3,38,19,0,201,
		203,3,40,20,0,202,200,1,0,0,0,202,201,1,0,0,0,203,37,1,0,0,0,204,205,5,
		17,0,0,205,209,6,19,-1,0,206,208,3,26,13,0,207,206,1,0,0,0,208,211,1,0,
		0,0,209,210,1,0,0,0,209,207,1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,
		213,5,7,0,0,213,219,6,19,-1,0,214,219,5,18,0,0,215,219,5,40,0,0,216,219,
		5,41,0,0,217,219,5,19,0,0,218,204,1,0,0,0,218,214,1,0,0,0,218,215,1,0,
		0,0,218,216,1,0,0,0,218,217,1,0,0,0,219,39,1,0,0,0,220,221,7,0,0,0,221,
		41,1,0,0,0,222,225,3,44,22,0,223,225,5,15,0,0,224,222,1,0,0,0,224,223,
		1,0,0,0,225,43,1,0,0,0,226,249,3,46,23,0,227,249,3,48,24,0,228,229,4,22,
		0,0,229,249,5,6,0,0,230,231,4,22,1,0,231,249,5,14,0,0,232,233,4,22,2,0,
		233,249,5,11,0,0,234,235,4,22,3,0,235,249,5,8,0,0,236,237,4,22,4,0,237,
		249,5,9,0,0,238,239,4,22,5,0,239,249,5,7,0,0,240,247,5,12,0,0,241,243,
		5,16,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,
		0,245,247,1,0,0,0,246,240,1,0,0,0,246,242,1,0,0,0,247,249,1,0,0,0,248,
		226,1,0,0,0,248,227,1,0,0,0,248,228,1,0,0,0,248,230,1,0,0,0,248,232,1,
		0,0,0,248,234,1,0,0,0,248,236,1,0,0,0,248,238,1,0,0,0,248,246,1,0,0,0,
		249,45,1,0,0,0,250,251,5,1,0,0,251,252,5,43,0,0,252,47,1,0,0,0,253,255,
		5,13,0,0,254,256,5,45,0,0,255,254,1,0,0,0,255,256,1,0,0,0,256,257,1,0,
		0,0,257,258,5,44,0,0,258,49,1,0,0,0,28,64,73,88,95,106,115,118,124,130,
		135,139,141,149,158,166,172,177,180,187,197,202,209,218,224,244,246,248,
		255
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
