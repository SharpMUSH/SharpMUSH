//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/SharpMUSH/SharpMUSH.Generated/SharpMUSHParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SharpMUSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ESCAPE=1, OBRACK=2, CBRACK=3, OBRACE=4, CBRACE=5, CPAREN=6, CCARET=7, 
		COMMAWS=8, EQUALS=9, PERCENT=10, SEMICOLON=11, OANSI=12, RSPACE=13, FUNCHAR=14, 
		OTHER=15, ANY_AT_ALL=16, COLON=17, REG_STARTCARET=18, REG_NUM=19, VWX=20, 
		ARG_NUM=21, SPACE=22, BLANKLINE=23, TAB=24, DBREF=25, ENACTOR_NAME=26, 
		CAP_ENACTOR_NAME=27, ACCENT_NAME=28, MONIKER_NAME=29, SUB_PRONOUN=30, 
		OBJ_PRONOUN=31, POS_PRONOUN=32, ABS_POS_PRONOUN=33, CALLED_DBREF=34, EXECUTOR_DBREF=35, 
		LOCATION_DBREF=36, LASTCOMMAND_BEFORE_EVAL=37, LASTCOMMAND_AFTER_EVAL=38, 
		INVOCATION_DEPTH=39, CURRENT_ARG_COUNT=40, ITEXT_NUM=41, ITEXT_LAST=42, 
		STEXT_NUM=43, OTHER_SUB=44, ANY=45, CANSI=46, ANSICHARACTER=47;
	public const int
		RULE_startSingleCommandString = 0, RULE_startCommandString = 1, RULE_startPlainCommaCommandArgs = 2, 
		RULE_startEqSplitCommandArgs = 3, RULE_startEqSplitCommand = 4, RULE_startPlainSingleCommandArg = 5, 
		RULE_startPlainString = 6, RULE_commandList = 7, RULE_command = 8, RULE_firstCommandMatch = 9, 
		RULE_commandRemainder = 10, RULE_commaCommandArgs = 11, RULE_singleCommandArg = 12, 
		RULE_evaluationString = 13, RULE_explicitEvaluationString = 14, RULE_explicitEvaluationStringConcatenatedRepeat = 15, 
		RULE_bracePattern = 16, RULE_bracketPattern = 17, RULE_funName = 18, RULE_function = 19, 
		RULE_funArguments = 20, RULE_funArgument = 21, RULE_validSubstitution = 22, 
		RULE_complexSubstitutionSymbol = 23, RULE_substitutionSymbol = 24, RULE_genericText = 25, 
		RULE_beginGenericText = 26, RULE_escapedText = 27, RULE_ansi = 28;
	public static readonly string[] ruleNames = {
		"startSingleCommandString", "startCommandString", "startPlainCommaCommandArgs", 
		"startEqSplitCommandArgs", "startEqSplitCommand", "startPlainSingleCommandArg", 
		"startPlainString", "commandList", "command", "firstCommandMatch", "commandRemainder", 
		"commaCommandArgs", "singleCommandArg", "evaluationString", "explicitEvaluationString", 
		"explicitEvaluationStringConcatenatedRepeat", "bracePattern", "bracketPattern", 
		"funName", "function", "funArguments", "funArgument", "validSubstitution", 
		"complexSubstitutionSymbol", "substitutionSymbol", "genericText", "beginGenericText", 
		"escapedText", "ansi"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\'", "'['", "']'", null, "'}'", "')'", "'>'", null, null, "'%'", 
		null, "'\\u001B'", "' '", null, null, null, "':'", null, null, null, null, 
		null, null, null, "'#'", "'n'", "'N'", "'~'", null, null, null, null, 
		null, "'@'", "'!'", null, null, null, "'?'", "'+'", null, null, null, 
		null, null, "'m'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ESCAPE", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "CPAREN", "CCARET", 
		"COMMAWS", "EQUALS", "PERCENT", "SEMICOLON", "OANSI", "RSPACE", "FUNCHAR", 
		"OTHER", "ANY_AT_ALL", "COLON", "REG_STARTCARET", "REG_NUM", "VWX", "ARG_NUM", 
		"SPACE", "BLANKLINE", "TAB", "DBREF", "ENACTOR_NAME", "CAP_ENACTOR_NAME", 
		"ACCENT_NAME", "MONIKER_NAME", "SUB_PRONOUN", "OBJ_PRONOUN", "POS_PRONOUN", 
		"ABS_POS_PRONOUN", "CALLED_DBREF", "EXECUTOR_DBREF", "LOCATION_DBREF", 
		"LASTCOMMAND_BEFORE_EVAL", "LASTCOMMAND_AFTER_EVAL", "INVOCATION_DEPTH", 
		"CURRENT_ARG_COUNT", "ITEXT_NUM", "ITEXT_LAST", "STEXT_NUM", "OTHER_SUB", 
		"ANY", "CANSI", "ANSICHARACTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SharpMUSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SharpMUSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    private int inFunction = 0;
	    private int inBraceDepth = 0;
	    private bool inCommandMatch = false;
	    private bool inCommandList = false;
	    private bool lookingForCommandArgCommas = false;
	    private bool lookingForCommandArgEquals = false;
	    private bool lookingForRegisterCaret = false;

		public SharpMUSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SharpMUSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartSingleCommandStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartSingleCommandStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startSingleCommandString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartSingleCommandString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartSingleCommandStringContext startSingleCommandString() {
		StartSingleCommandStringContext _localctx = new StartSingleCommandStringContext(Context, State);
		EnterRule(_localctx, 0, RULE_startSingleCommandString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			command();
			State = 59;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartCommandStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandListContext commandList() {
			return GetRuleContext<CommandListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartCommandStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startCommandString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartCommandString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartCommandStringContext startCommandString() {
		StartCommandStringContext _localctx = new StartCommandStringContext(Context, State);
		EnterRule(_localctx, 2, RULE_startCommandString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			inCommandList = true;
			State = 62;
			commandList();
			State = 63;
			Match(Eof);
			inCommandList = false; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPlainCommaCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommaCommandArgsContext commaCommandArgs() {
			return GetRuleContext<CommaCommandArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartPlainCommaCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPlainCommaCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPlainCommaCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPlainCommaCommandArgsContext startPlainCommaCommandArgs() {
		StartPlainCommaCommandArgsContext _localctx = new StartPlainCommaCommandArgsContext(Context, State);
		EnterRule(_localctx, 4, RULE_startPlainCommaCommandArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			commaCommandArgs();
			State = 67;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartEqSplitCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg() {
			return GetRuleContext<SingleCommandArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommaCommandArgsContext commaCommandArgs() {
			return GetRuleContext<CommaCommandArgsContext>(0);
		}
		public StartEqSplitCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startEqSplitCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartEqSplitCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartEqSplitCommandArgsContext startEqSplitCommandArgs() {
		StartEqSplitCommandArgsContext _localctx = new StartEqSplitCommandArgsContext(Context, State);
		EnterRule(_localctx, 6, RULE_startEqSplitCommandArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			lookingForCommandArgEquals = true;
			State = 70;
			singleCommandArg();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 71;
				Match(EQUALS);
				lookingForCommandArgEquals = false;
				State = 73;
				commaCommandArgs();
				}
			}

			State = 76;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartEqSplitCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext[] singleCommandArg() {
			return GetRuleContexts<SingleCommandArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg(int i) {
			return GetRuleContext<SingleCommandArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		public StartEqSplitCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startEqSplitCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartEqSplitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartEqSplitCommandContext startEqSplitCommand() {
		StartEqSplitCommandContext _localctx = new StartEqSplitCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_startEqSplitCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			lookingForCommandArgEquals = true;
			State = 79;
			singleCommandArg();
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 80;
				Match(EQUALS);
				lookingForCommandArgEquals = false;
				State = 82;
				singleCommandArg();
				}
			}

			State = 85;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPlainSingleCommandArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg() {
			return GetRuleContext<SingleCommandArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartPlainSingleCommandArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPlainSingleCommandArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPlainSingleCommandArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPlainSingleCommandArgContext startPlainSingleCommandArg() {
		StartPlainSingleCommandArgContext _localctx = new StartPlainSingleCommandArgContext(Context, State);
		EnterRule(_localctx, 10, RULE_startPlainSingleCommandArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			singleCommandArg();
			State = 88;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPlainStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartPlainStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPlainString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPlainString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPlainStringContext startPlainString() {
		StartPlainStringContext _localctx = new StartPlainStringContext(Context, State);
		EnterRule(_localctx, 12, RULE_startPlainString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			evaluationString();
			State = 91;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(SharpMUSHParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(SharpMUSHParser.SEMICOLON, i);
		}
		public CommandListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandListContext commandList() {
		CommandListContext _localctx = new CommandListContext(Context, State);
		EnterRule(_localctx, 14, RULE_commandList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			command();
			State = 99;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 94;
					if (!(inBraceDepth == 0)) throw new FailedPredicateException(this, "inBraceDepth == 0");
					State = 95;
					Match(SEMICOLON);
					State = 96;
					command();
					}
					} 
				}
				State = 101;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FirstCommandMatchContext firstCommandMatch() {
			return GetRuleContext<FirstCommandMatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandRemainderContext commandRemainder() {
			return GetRuleContext<CommandRemainderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RSPACE() { return GetTokens(SharpMUSHParser.RSPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSPACE(int i) {
			return GetToken(SharpMUSHParser.RSPACE, i);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 16, RULE_command);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			inCommandMatch = true;
			State = 103;
			firstCommandMatch();
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 105;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 104;
						Match(RSPACE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 107;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				inCommandMatch = false;
				State = 110;
				commandRemainder();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstCommandMatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public FirstCommandMatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstCommandMatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstCommandMatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstCommandMatchContext firstCommandMatch() {
		FirstCommandMatchContext _localctx = new FirstCommandMatchContext(Context, State);
		EnterRule(_localctx, 18, RULE_firstCommandMatch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandRemainderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public CommandRemainderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandRemainder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandRemainder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandRemainderContext commandRemainder() {
		CommandRemainderContext _localctx = new CommandRemainderContext(Context, State);
		EnterRule(_localctx, 20, RULE_commandRemainder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext[] singleCommandArg() {
			return GetRuleContexts<SingleCommandArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg(int i) {
			return GetRuleContext<SingleCommandArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAWS() { return GetTokens(SharpMUSHParser.COMMAWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAWS(int i) {
			return GetToken(SharpMUSHParser.COMMAWS, i);
		}
		public CommaCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaCommandArgsContext commaCommandArgs() {
		CommaCommandArgsContext _localctx = new CommaCommandArgsContext(Context, State);
		EnterRule(_localctx, 22, RULE_commaCommandArgs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			lookingForCommandArgCommas = true;
			State = 118;
			singleCommandArg();
			State = 124;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 119;
					if (!(inBraceDepth == 0)) throw new FailedPredicateException(this, "inBraceDepth == 0");
					State = 120;
					Match(COMMAWS);
					State = 121;
					singleCommandArg();
					}
					} 
				}
				State = 126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			lookingForCommandArgCommas = false;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleCommandArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public SingleCommandArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleCommandArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleCommandArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleCommandArgContext singleCommandArg() {
		SingleCommandArgContext _localctx = new SingleCommandArgContext(Context, State);
		EnterRule(_localctx, 24, RULE_singleCommandArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString() {
			return GetRuleContext<ExplicitEvaluationStringContext>(0);
		}
		public EvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluationStringContext evaluationString() {
		EvaluationStringContext _localctx = new EvaluationStringContext(Context, State);
		EnterRule(_localctx, 26, RULE_evaluationString);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131;
				function();
				State = 133;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 132;
					explicitEvaluationString();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				explicitEvaluationString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracePatternContext bracePattern() {
			return GetRuleContext<BracePatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringConcatenatedRepeatContext[] explicitEvaluationStringConcatenatedRepeat() {
			return GetRuleContexts<ExplicitEvaluationStringConcatenatedRepeatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringConcatenatedRepeatContext explicitEvaluationStringConcatenatedRepeat(int i) {
			return GetRuleContext<ExplicitEvaluationStringConcatenatedRepeatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracketPatternContext bracketPattern() {
			return GetRuleContext<BracketPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidSubstitutionContext validSubstitution() {
			return GetRuleContext<ValidSubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginGenericTextContext beginGenericText() {
			return GetRuleContext<BeginGenericTextContext>(0);
		}
		public ExplicitEvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringContext explicitEvaluationString() {
		ExplicitEvaluationStringContext _localctx = new ExplicitEvaluationStringContext(Context, State);
		EnterRule(_localctx, 28, RULE_explicitEvaluationString);
		try {
			int _alt;
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				bracePattern();
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 139;
						explicitEvaluationStringConcatenatedRepeat();
						}
						} 
					}
					State = 144;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 145;
				bracketPattern();
				State = 149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 146;
						explicitEvaluationStringConcatenatedRepeat();
						}
						} 
					}
					State = 151;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152;
				Match(PERCENT);
				State = 153;
				validSubstitution();
				State = 157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 154;
						explicitEvaluationStringConcatenatedRepeat();
						}
						} 
					}
					State = 159;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 160;
				beginGenericText();
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 161;
						explicitEvaluationStringConcatenatedRepeat();
						}
						} 
					}
					State = 166;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringConcatenatedRepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BracePatternContext bracePattern() {
			return GetRuleContext<BracePatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BracketPatternContext bracketPattern() {
			return GetRuleContext<BracketPatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidSubstitutionContext validSubstitution() {
			return GetRuleContext<ValidSubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTextContext genericText() {
			return GetRuleContext<GenericTextContext>(0);
		}
		public ExplicitEvaluationStringConcatenatedRepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationStringConcatenatedRepeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationStringConcatenatedRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringConcatenatedRepeatContext explicitEvaluationStringConcatenatedRepeat() {
		ExplicitEvaluationStringConcatenatedRepeatContext _localctx = new ExplicitEvaluationStringConcatenatedRepeatContext(Context, State);
		EnterRule(_localctx, 30, RULE_explicitEvaluationStringConcatenatedRepeat);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				bracePattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				bracketPattern();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 171;
				Match(PERCENT);
				State = 172;
				validSubstitution();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 173;
				genericText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracePatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACE() { return GetToken(SharpMUSHParser.OBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACE() { return GetToken(SharpMUSHParser.CBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext[] explicitEvaluationString() {
			return GetRuleContexts<ExplicitEvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString(int i) {
			return GetRuleContext<ExplicitEvaluationStringContext>(i);
		}
		public BracePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracePattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracePattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracePatternContext bracePattern() {
		BracePatternContext _localctx = new BracePatternContext(Context, State);
		EnterRule(_localctx, 32, RULE_bracePattern);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(OBRACE);
			 ++inBraceDepth; 
			State = 181;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 178;
					explicitEvaluationString();
					}
					} 
				}
				State = 183;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 184;
			Match(CBRACE);
			 --inBraceDepth; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketPatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(SharpMUSHParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(SharpMUSHParser.CBRACK, 0); }
		public BracketPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketPattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BracketPatternContext bracketPattern() {
		BracketPatternContext _localctx = new BracketPatternContext(Context, State);
		EnterRule(_localctx, 34, RULE_bracketPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(OBRACK);
			State = 188;
			evaluationString();
			State = 189;
			Match(CBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCHAR() { return GetToken(SharpMUSHParser.FUNCHAR, 0); }
		public FunNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunNameContext funName() {
		FunNameContext _localctx = new FunNameContext(Context, State);
		EnterRule(_localctx, 36, RULE_funName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(FUNCHAR);
			++inFunction;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunNameContext funName() {
			return GetRuleContext<FunNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(SharpMUSHParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunArgumentsContext funArguments() {
			return GetRuleContext<FunArgumentsContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 38, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			funName();
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 195;
				funArguments();
				}
				break;
			}
			State = 198;
			Match(CPAREN);
			--inFunction;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunArgumentContext[] funArgument() {
			return GetRuleContexts<FunArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunArgumentContext funArgument(int i) {
			return GetRuleContext<FunArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAWS() { return GetTokens(SharpMUSHParser.COMMAWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAWS(int i) {
			return GetToken(SharpMUSHParser.COMMAWS, i);
		}
		public FunArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunArgumentsContext funArguments() {
		FunArgumentsContext _localctx = new FunArgumentsContext(Context, State);
		EnterRule(_localctx, 40, RULE_funArguments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			funArgument();
			State = 207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 202;
					if (!(inBraceDepth == 0)) throw new FailedPredicateException(this, "inBraceDepth == 0");
					State = 203;
					Match(COMMAWS);
					State = 204;
					funArgument();
					}
					} 
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public FunArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunArgumentContext funArgument() {
		FunArgumentContext _localctx = new FunArgumentContext(Context, State);
		EnterRule(_localctx, 42, RULE_funArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidSubstitutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComplexSubstitutionSymbolContext complexSubstitutionSymbol() {
			return GetRuleContext<ComplexSubstitutionSymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionSymbolContext substitutionSymbol() {
			return GetRuleContext<SubstitutionSymbolContext>(0);
		}
		public ValidSubstitutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validSubstitution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidSubstitution(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidSubstitutionContext validSubstitution() {
		ValidSubstitutionContext _localctx = new ValidSubstitutionContext(Context, State);
		EnterRule(_localctx, 44, RULE_validSubstitution);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REG_STARTCARET:
			case REG_NUM:
			case VWX:
			case ITEXT_NUM:
			case ITEXT_LAST:
			case STEXT_NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				complexSubstitutionSymbol();
				}
				break;
			case EQUALS:
			case PERCENT:
			case COLON:
			case ARG_NUM:
			case SPACE:
			case BLANKLINE:
			case TAB:
			case DBREF:
			case ENACTOR_NAME:
			case CAP_ENACTOR_NAME:
			case ACCENT_NAME:
			case MONIKER_NAME:
			case SUB_PRONOUN:
			case OBJ_PRONOUN:
			case POS_PRONOUN:
			case ABS_POS_PRONOUN:
			case CALLED_DBREF:
			case EXECUTOR_DBREF:
			case LOCATION_DBREF:
			case LASTCOMMAND_BEFORE_EVAL:
			case LASTCOMMAND_AFTER_EVAL:
			case INVOCATION_DEPTH:
			case CURRENT_ARG_COUNT:
			case OTHER_SUB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				substitutionSymbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexSubstitutionSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG_STARTCARET() { return GetToken(SharpMUSHParser.REG_STARTCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CCARET() { return GetToken(SharpMUSHParser.CCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG_NUM() { return GetToken(SharpMUSHParser.REG_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITEXT_NUM() { return GetToken(SharpMUSHParser.ITEXT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITEXT_LAST() { return GetToken(SharpMUSHParser.ITEXT_LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEXT_NUM() { return GetToken(SharpMUSHParser.STEXT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VWX() { return GetToken(SharpMUSHParser.VWX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext[] explicitEvaluationString() {
			return GetRuleContexts<ExplicitEvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString(int i) {
			return GetRuleContext<ExplicitEvaluationStringContext>(i);
		}
		public ComplexSubstitutionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexSubstitutionSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexSubstitutionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexSubstitutionSymbolContext complexSubstitutionSymbol() {
		ComplexSubstitutionSymbolContext _localctx = new ComplexSubstitutionSymbolContext(Context, State);
		EnterRule(_localctx, 46, RULE_complexSubstitutionSymbol);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REG_STARTCARET:
				{
				State = 216;
				Match(REG_STARTCARET);
				lookingForRegisterCaret = true;
				State = 221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 218;
						explicitEvaluationString();
						}
						} 
					}
					State = 223;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				}
				State = 224;
				Match(CCARET);
				lookingForRegisterCaret = false;
				            
				}
				break;
			case REG_NUM:
				{
				State = 226;
				Match(REG_NUM);
				}
				break;
			case ITEXT_NUM:
				{
				State = 227;
				Match(ITEXT_NUM);
				}
				break;
			case ITEXT_LAST:
				{
				State = 228;
				Match(ITEXT_LAST);
				}
				break;
			case STEXT_NUM:
				{
				State = 229;
				Match(STEXT_NUM);
				}
				break;
			case VWX:
				{
				State = 230;
				Match(VWX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstitutionSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(SharpMUSHParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANKLINE() { return GetToken(SharpMUSHParser.BLANKLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(SharpMUSHParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SharpMUSHParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBREF() { return GetToken(SharpMUSHParser.DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENACTOR_NAME() { return GetToken(SharpMUSHParser.ENACTOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAP_ENACTOR_NAME() { return GetToken(SharpMUSHParser.CAP_ENACTOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCENT_NAME() { return GetToken(SharpMUSHParser.ACCENT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONIKER_NAME() { return GetToken(SharpMUSHParser.MONIKER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_PRONOUN() { return GetToken(SharpMUSHParser.SUB_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJ_PRONOUN() { return GetToken(SharpMUSHParser.OBJ_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POS_PRONOUN() { return GetToken(SharpMUSHParser.POS_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS_POS_PRONOUN() { return GetToken(SharpMUSHParser.ABS_POS_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG_NUM() { return GetToken(SharpMUSHParser.ARG_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED_DBREF() { return GetToken(SharpMUSHParser.CALLED_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTOR_DBREF() { return GetToken(SharpMUSHParser.EXECUTOR_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION_DBREF() { return GetToken(SharpMUSHParser.LOCATION_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTCOMMAND_BEFORE_EVAL() { return GetToken(SharpMUSHParser.LASTCOMMAND_BEFORE_EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTCOMMAND_AFTER_EVAL() { return GetToken(SharpMUSHParser.LASTCOMMAND_AFTER_EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOCATION_DEPTH() { return GetToken(SharpMUSHParser.INVOCATION_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ARG_COUNT() { return GetToken(SharpMUSHParser.CURRENT_ARG_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER_SUB() { return GetToken(SharpMUSHParser.OTHER_SUB, 0); }
		public SubstitutionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substitutionSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstitutionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstitutionSymbolContext substitutionSymbol() {
		SubstitutionSymbolContext _localctx = new SubstitutionSymbolContext(Context, State);
		EnterRule(_localctx, 48, RULE_substitutionSymbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 19791207335424L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BeginGenericTextContext beginGenericText() {
			return GetRuleContext<BeginGenericTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCHAR() { return GetToken(SharpMUSHParser.FUNCHAR, 0); }
		public GenericTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTextContext genericText() {
		GenericTextContext _localctx = new GenericTextContext(Context, State);
		EnterRule(_localctx, 50, RULE_genericText);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				beginGenericText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236;
				Match(FUNCHAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginGenericTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EscapedTextContext escapedText() {
			return GetRuleContext<EscapedTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnsiContext ansi() {
			return GetRuleContext<AnsiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(SharpMUSHParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RSPACE() { return GetTokens(SharpMUSHParser.RSPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSPACE(int i) {
			return GetToken(SharpMUSHParser.RSPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SharpMUSHParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAWS() { return GetToken(SharpMUSHParser.COMMAWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CCARET() { return GetToken(SharpMUSHParser.CCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER() { return GetToken(SharpMUSHParser.OTHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_AT_ALL() { return GetToken(SharpMUSHParser.ANY_AT_ALL, 0); }
		public BeginGenericTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginGenericText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginGenericText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginGenericTextContext beginGenericText() {
		BeginGenericTextContext _localctx = new BeginGenericTextContext(Context, State);
		EnterRule(_localctx, 52, RULE_beginGenericText);
		int _la;
		try {
			int _alt;
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239;
				escapedText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240;
				ansi();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 241;
				if (!( inFunction == 0 )) throw new FailedPredicateException(this, " inFunction == 0 ");
				State = 242;
				Match(CPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 243;
				if (!( !inCommandMatch )) throw new FailedPredicateException(this, " !inCommandMatch ");
				State = 245;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 244;
						Match(RSPACE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 247;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 249;
				if (!( !inCommandList || inBraceDepth > 0 )) throw new FailedPredicateException(this, " !inCommandList || inBraceDepth > 0 ");
				State = 250;
				Match(SEMICOLON);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 251;
				if (!( (!lookingForCommandArgCommas && inFunction == 0) || inBraceDepth > 0 )) throw new FailedPredicateException(this, " (!lookingForCommandArgCommas && inFunction == 0) || inBraceDepth > 0 ");
				State = 252;
				Match(COMMAWS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 253;
				if (!( !lookingForCommandArgEquals )) throw new FailedPredicateException(this, " !lookingForCommandArgEquals ");
				State = 254;
				Match(EQUALS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 255;
				if (!( !lookingForRegisterCaret )) throw new FailedPredicateException(this, " !lookingForRegisterCaret ");
				State = 256;
				Match(CCARET);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 257;
				_la = TokenStream.LA(1);
				if ( !(_la==OTHER || _la==ANY_AT_ALL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SharpMUSHParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(SharpMUSHParser.ANY, 0); }
		public EscapedTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscapedText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapedTextContext escapedText() {
		EscapedTextContext _localctx = new EscapedTextContext(Context, State);
		EnterRule(_localctx, 54, RULE_escapedText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(ESCAPE);
			State = 261;
			Match(ANY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnsiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OANSI() { return GetToken(SharpMUSHParser.OANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CANSI() { return GetToken(SharpMUSHParser.CANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSICHARACTER() { return GetToken(SharpMUSHParser.ANSICHARACTER, 0); }
		public AnsiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ansi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnsi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnsiContext ansi() {
		AnsiContext _localctx = new AnsiContext(Context, State);
		EnterRule(_localctx, 56, RULE_ansi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(OANSI);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANSICHARACTER) {
				{
				State = 264;
				Match(ANSICHARACTER);
				}
			}

			State = 267;
			Match(CANSI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return commandList_sempred((CommandListContext)_localctx, predIndex);
		case 11: return commaCommandArgs_sempred((CommaCommandArgsContext)_localctx, predIndex);
		case 20: return funArguments_sempred((FunArgumentsContext)_localctx, predIndex);
		case 26: return beginGenericText_sempred((BeginGenericTextContext)_localctx, predIndex);
		}
		return true;
	}
	private bool commandList_sempred(CommandListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return inBraceDepth == 0;
		}
		return true;
	}
	private bool commaCommandArgs_sempred(CommaCommandArgsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return inBraceDepth == 0;
		}
		return true;
	}
	private bool funArguments_sempred(FunArgumentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return inBraceDepth == 0;
		}
		return true;
	}
	private bool beginGenericText_sempred(BeginGenericTextContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return  inFunction == 0 ;
		case 4: return  !inCommandMatch ;
		case 5: return  !inCommandList || inBraceDepth > 0 ;
		case 6: return  (!lookingForCommandArgCommas && inFunction == 0) || inBraceDepth > 0 ;
		case 7: return  !lookingForCommandArgEquals ;
		case 8: return  !lookingForRegisterCaret ;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,47,270,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,75,
		8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,84,8,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,
		1,6,1,7,1,7,1,7,1,7,5,7,98,8,7,10,7,12,7,101,9,7,1,8,1,8,1,8,4,8,106,8,
		8,11,8,12,8,107,1,8,1,8,3,8,112,8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,
		11,1,11,5,11,123,8,11,10,11,12,11,126,9,11,1,11,1,11,1,12,1,12,1,13,1,
		13,3,13,134,8,13,1,13,3,13,137,8,13,1,14,1,14,5,14,141,8,14,10,14,12,14,
		144,9,14,1,14,1,14,5,14,148,8,14,10,14,12,14,151,9,14,1,14,1,14,1,14,5,
		14,156,8,14,10,14,12,14,159,9,14,1,14,1,14,5,14,163,8,14,10,14,12,14,166,
		9,14,3,14,168,8,14,1,15,1,15,1,15,1,15,1,15,3,15,175,8,15,1,16,1,16,1,
		16,5,16,180,8,16,10,16,12,16,183,9,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
		17,1,18,1,18,1,18,1,19,1,19,3,19,197,8,19,1,19,1,19,1,19,1,20,1,20,1,20,
		1,20,5,20,206,8,20,10,20,12,20,209,9,20,1,21,1,21,1,22,1,22,3,22,215,8,
		22,1,23,1,23,1,23,5,23,220,8,23,10,23,12,23,223,9,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,3,23,232,8,23,1,24,1,24,1,25,1,25,3,25,238,8,25,1,26,
		1,26,1,26,1,26,1,26,1,26,4,26,246,8,26,11,26,12,26,247,1,26,1,26,1,26,
		1,26,1,26,1,26,1,26,1,26,1,26,3,26,259,8,26,1,27,1,27,1,27,1,28,1,28,3,
		28,266,8,28,1,28,1,28,1,28,3,181,207,221,0,29,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,0,2,4,0,9,10,
		17,17,21,40,44,44,1,0,15,16,279,0,58,1,0,0,0,2,61,1,0,0,0,4,66,1,0,0,0,
		6,69,1,0,0,0,8,78,1,0,0,0,10,87,1,0,0,0,12,90,1,0,0,0,14,93,1,0,0,0,16,
		102,1,0,0,0,18,113,1,0,0,0,20,115,1,0,0,0,22,117,1,0,0,0,24,129,1,0,0,
		0,26,136,1,0,0,0,28,167,1,0,0,0,30,174,1,0,0,0,32,176,1,0,0,0,34,187,1,
		0,0,0,36,191,1,0,0,0,38,194,1,0,0,0,40,201,1,0,0,0,42,210,1,0,0,0,44,214,
		1,0,0,0,46,231,1,0,0,0,48,233,1,0,0,0,50,237,1,0,0,0,52,258,1,0,0,0,54,
		260,1,0,0,0,56,263,1,0,0,0,58,59,3,16,8,0,59,60,5,0,0,1,60,1,1,0,0,0,61,
		62,6,1,-1,0,62,63,3,14,7,0,63,64,5,0,0,1,64,65,6,1,-1,0,65,3,1,0,0,0,66,
		67,3,22,11,0,67,68,5,0,0,1,68,5,1,0,0,0,69,70,6,3,-1,0,70,74,3,24,12,0,
		71,72,5,9,0,0,72,73,6,3,-1,0,73,75,3,22,11,0,74,71,1,0,0,0,74,75,1,0,0,
		0,75,76,1,0,0,0,76,77,5,0,0,1,77,7,1,0,0,0,78,79,6,4,-1,0,79,83,3,24,12,
		0,80,81,5,9,0,0,81,82,6,4,-1,0,82,84,3,24,12,0,83,80,1,0,0,0,83,84,1,0,
		0,0,84,85,1,0,0,0,85,86,5,0,0,1,86,9,1,0,0,0,87,88,3,24,12,0,88,89,5,0,
		0,1,89,11,1,0,0,0,90,91,3,26,13,0,91,92,5,0,0,1,92,13,1,0,0,0,93,99,3,
		16,8,0,94,95,4,7,0,0,95,96,5,11,0,0,96,98,3,16,8,0,97,94,1,0,0,0,98,101,
		1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,15,1,0,0,0,101,99,1,0,0,0,102,
		103,6,8,-1,0,103,111,3,18,9,0,104,106,5,13,0,0,105,104,1,0,0,0,106,107,
		1,0,0,0,107,105,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,6,8,-1,
		0,110,112,3,20,10,0,111,105,1,0,0,0,111,112,1,0,0,0,112,17,1,0,0,0,113,
		114,3,26,13,0,114,19,1,0,0,0,115,116,3,26,13,0,116,21,1,0,0,0,117,118,
		6,11,-1,0,118,124,3,24,12,0,119,120,4,11,1,0,120,121,5,8,0,0,121,123,3,
		24,12,0,122,119,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,
		0,125,127,1,0,0,0,126,124,1,0,0,0,127,128,6,11,-1,0,128,23,1,0,0,0,129,
		130,3,26,13,0,130,25,1,0,0,0,131,133,3,38,19,0,132,134,3,28,14,0,133,132,
		1,0,0,0,133,134,1,0,0,0,134,137,1,0,0,0,135,137,3,28,14,0,136,131,1,0,
		0,0,136,135,1,0,0,0,137,27,1,0,0,0,138,142,3,32,16,0,139,141,3,30,15,0,
		140,139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,168,
		1,0,0,0,144,142,1,0,0,0,145,149,3,34,17,0,146,148,3,30,15,0,147,146,1,
		0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,168,1,0,0,0,
		151,149,1,0,0,0,152,153,5,10,0,0,153,157,3,44,22,0,154,156,3,30,15,0,155,
		154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,168,1,
		0,0,0,159,157,1,0,0,0,160,164,3,52,26,0,161,163,3,30,15,0,162,161,1,0,
		0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,168,1,0,0,0,166,
		164,1,0,0,0,167,138,1,0,0,0,167,145,1,0,0,0,167,152,1,0,0,0,167,160,1,
		0,0,0,168,29,1,0,0,0,169,175,3,32,16,0,170,175,3,34,17,0,171,172,5,10,
		0,0,172,175,3,44,22,0,173,175,3,50,25,0,174,169,1,0,0,0,174,170,1,0,0,
		0,174,171,1,0,0,0,174,173,1,0,0,0,175,31,1,0,0,0,176,177,5,4,0,0,177,181,
		6,16,-1,0,178,180,3,28,14,0,179,178,1,0,0,0,180,183,1,0,0,0,181,182,1,
		0,0,0,181,179,1,0,0,0,182,184,1,0,0,0,183,181,1,0,0,0,184,185,5,5,0,0,
		185,186,6,16,-1,0,186,33,1,0,0,0,187,188,5,2,0,0,188,189,3,26,13,0,189,
		190,5,3,0,0,190,35,1,0,0,0,191,192,5,14,0,0,192,193,6,18,-1,0,193,37,1,
		0,0,0,194,196,3,36,18,0,195,197,3,40,20,0,196,195,1,0,0,0,196,197,1,0,
		0,0,197,198,1,0,0,0,198,199,5,6,0,0,199,200,6,19,-1,0,200,39,1,0,0,0,201,
		207,3,42,21,0,202,203,4,20,2,0,203,204,5,8,0,0,204,206,3,42,21,0,205,202,
		1,0,0,0,206,209,1,0,0,0,207,208,1,0,0,0,207,205,1,0,0,0,208,41,1,0,0,0,
		209,207,1,0,0,0,210,211,3,26,13,0,211,43,1,0,0,0,212,215,3,46,23,0,213,
		215,3,48,24,0,214,212,1,0,0,0,214,213,1,0,0,0,215,45,1,0,0,0,216,217,5,
		18,0,0,217,221,6,23,-1,0,218,220,3,28,14,0,219,218,1,0,0,0,220,223,1,0,
		0,0,221,222,1,0,0,0,221,219,1,0,0,0,222,224,1,0,0,0,223,221,1,0,0,0,224,
		225,5,7,0,0,225,232,6,23,-1,0,226,232,5,19,0,0,227,232,5,41,0,0,228,232,
		5,42,0,0,229,232,5,43,0,0,230,232,5,20,0,0,231,216,1,0,0,0,231,226,1,0,
		0,0,231,227,1,0,0,0,231,228,1,0,0,0,231,229,1,0,0,0,231,230,1,0,0,0,232,
		47,1,0,0,0,233,234,7,0,0,0,234,49,1,0,0,0,235,238,3,52,26,0,236,238,5,
		14,0,0,237,235,1,0,0,0,237,236,1,0,0,0,238,51,1,0,0,0,239,259,3,54,27,
		0,240,259,3,56,28,0,241,242,4,26,3,0,242,259,5,6,0,0,243,245,4,26,4,0,
		244,246,5,13,0,0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,
		1,0,0,0,248,259,1,0,0,0,249,250,4,26,5,0,250,259,5,11,0,0,251,252,4,26,
		6,0,252,259,5,8,0,0,253,254,4,26,7,0,254,259,5,9,0,0,255,256,4,26,8,0,
		256,259,5,7,0,0,257,259,7,1,0,0,258,239,1,0,0,0,258,240,1,0,0,0,258,241,
		1,0,0,0,258,243,1,0,0,0,258,249,1,0,0,0,258,251,1,0,0,0,258,253,1,0,0,
		0,258,255,1,0,0,0,258,257,1,0,0,0,259,53,1,0,0,0,260,261,5,1,0,0,261,262,
		5,45,0,0,262,55,1,0,0,0,263,265,5,12,0,0,264,266,5,47,0,0,265,264,1,0,
		0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,268,5,46,0,0,268,57,1,0,0,0,24,
		74,83,99,107,111,124,133,136,142,149,157,164,167,174,181,196,207,214,221,
		231,237,247,258,265
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
