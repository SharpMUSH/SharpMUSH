//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/SharpMUSH/SharpMUSH.Generated/SharpMUSHParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SharpMUSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ESCAPE=1, OBRACK=2, CBRACK=3, OBRACE=4, CBRACE=5, CPAREN=6, CCARET=7, 
		COMMAWS=8, EQUALS=9, PERCENT=10, DOLLAR=11, SEMICOLON=12, COLON=13, OANSI=14, 
		RSPACE=15, FUNCHAR=16, OTHER=17, ANY_AT_ALL=18, REG_STARTCARET=19, REG_NUM=20, 
		VWX=21, ARG_NUM=22, SPACE=23, BLANKLINE=24, TAB=25, DBREF=26, ENACTOR_NAME=27, 
		CAP_ENACTOR_NAME=28, ACCENT_NAME=29, MONIKER_NAME=30, SUB_PRONOUN=31, 
		OBJ_PRONOUN=32, POS_PRONOUN=33, ABS_POS_PRONOUN=34, CALLED_DBREF=35, EXECUTOR_DBREF=36, 
		LOCATION_DBREF=37, LASTCOMMAND_BEFORE_EVAL=38, LASTCOMMAND_AFTER_EVAL=39, 
		INVOCATION_DEPTH=40, CURRENT_ARG_COUNT=41, ITEXT_NUM=42, ITEXT_LAST=43, 
		STEXT_NUM=44, OTHER_SUB=45, ANY=46, SPACEREGEX=47, ANYREGEX=48, CANSI=49, 
		ANSICHARACTER=50;
	public const int
		RULE_startSingleCommandString = 0, RULE_startCommandString = 1, RULE_startPlainCommaCommandArgs = 2, 
		RULE_startEqSplitCommandArgs = 3, RULE_startEqSplitCommand = 4, RULE_startPlainSingleCommandArg = 5, 
		RULE_startPlainString = 6, RULE_commandList = 7, RULE_command = 8, RULE_firstCommandMatch = 9, 
		RULE_commaCommandArgs = 10, RULE_singleCommandArg = 11, RULE_evaluationString = 12, 
		RULE_explicitEvaluationString = 13, RULE_explicitEvaluationStringConcatenatedRepeat = 14, 
		RULE_funName = 15, RULE_function = 16, RULE_funArguments = 17, RULE_funArgument = 18, 
		RULE_validSubstitution = 19, RULE_complexSubstitutionSymbol = 20, RULE_substitutionSymbol = 21, 
		RULE_genericText = 22, RULE_beginGenericText = 23, RULE_escapedText = 24, 
		RULE_regex = 25, RULE_ansi = 26;
	public static readonly string[] ruleNames = {
		"startSingleCommandString", "startCommandString", "startPlainCommaCommandArgs", 
		"startEqSplitCommandArgs", "startEqSplitCommand", "startPlainSingleCommandArg", 
		"startPlainString", "commandList", "command", "firstCommandMatch", "commaCommandArgs", 
		"singleCommandArg", "evaluationString", "explicitEvaluationString", "explicitEvaluationStringConcatenatedRepeat", 
		"funName", "function", "funArguments", "funArgument", "validSubstitution", 
		"complexSubstitutionSymbol", "substitutionSymbol", "genericText", "beginGenericText", 
		"escapedText", "regex", "ansi"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\\'", "'['", "']'", "'{'", "'}'", "')'", "'>'", null, "'='", "'%'", 
		"'$'", "';'", "':'", "'\\u001B'", null, null, null, null, null, null, 
		null, null, null, null, null, "'#'", "'n'", "'N'", "'~'", null, null, 
		null, null, null, "'@'", "'!'", null, null, null, "'?'", "'+'", null, 
		null, null, null, null, null, null, "'m'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ESCAPE", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "CPAREN", "CCARET", 
		"COMMAWS", "EQUALS", "PERCENT", "DOLLAR", "SEMICOLON", "COLON", "OANSI", 
		"RSPACE", "FUNCHAR", "OTHER", "ANY_AT_ALL", "REG_STARTCARET", "REG_NUM", 
		"VWX", "ARG_NUM", "SPACE", "BLANKLINE", "TAB", "DBREF", "ENACTOR_NAME", 
		"CAP_ENACTOR_NAME", "ACCENT_NAME", "MONIKER_NAME", "SUB_PRONOUN", "OBJ_PRONOUN", 
		"POS_PRONOUN", "ABS_POS_PRONOUN", "CALLED_DBREF", "EXECUTOR_DBREF", "LOCATION_DBREF", 
		"LASTCOMMAND_BEFORE_EVAL", "LASTCOMMAND_AFTER_EVAL", "INVOCATION_DEPTH", 
		"CURRENT_ARG_COUNT", "ITEXT_NUM", "ITEXT_LAST", "STEXT_NUM", "OTHER_SUB", 
		"ANY", "SPACEREGEX", "ANYREGEX", "CANSI", "ANSICHARACTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SharpMUSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SharpMUSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    private int inFunction = 0;
	    private bool inCommandMatch = false;
	    private bool inCommandList = false;
	    private bool lookingForCommandArgCommas = false;
	    private bool lookingForCommandArgEquals = false;
	    private bool lookingForRegisterCaret = false;

		public SharpMUSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SharpMUSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartSingleCommandStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command() {
			return GetRuleContext<CommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartSingleCommandStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startSingleCommandString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartSingleCommandString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartSingleCommandStringContext startSingleCommandString() {
		StartSingleCommandStringContext _localctx = new StartSingleCommandStringContext(Context, State);
		EnterRule(_localctx, 0, RULE_startSingleCommandString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			command();
			State = 55;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartCommandStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandListContext commandList() {
			return GetRuleContext<CommandListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartCommandStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startCommandString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartCommandString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartCommandStringContext startCommandString() {
		StartCommandStringContext _localctx = new StartCommandStringContext(Context, State);
		EnterRule(_localctx, 2, RULE_startCommandString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			inCommandList = true;
			State = 58;
			commandList();
			State = 59;
			Match(Eof);
			inCommandList = false;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPlainCommaCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommaCommandArgsContext commaCommandArgs() {
			return GetRuleContext<CommaCommandArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartPlainCommaCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPlainCommaCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPlainCommaCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPlainCommaCommandArgsContext startPlainCommaCommandArgs() {
		StartPlainCommaCommandArgsContext _localctx = new StartPlainCommaCommandArgsContext(Context, State);
		EnterRule(_localctx, 4, RULE_startPlainCommaCommandArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			commaCommandArgs();
			State = 63;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartEqSplitCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg() {
			return GetRuleContext<SingleCommandArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommaCommandArgsContext commaCommandArgs() {
			return GetRuleContext<CommaCommandArgsContext>(0);
		}
		public StartEqSplitCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startEqSplitCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartEqSplitCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartEqSplitCommandArgsContext startEqSplitCommandArgs() {
		StartEqSplitCommandArgsContext _localctx = new StartEqSplitCommandArgsContext(Context, State);
		EnterRule(_localctx, 6, RULE_startEqSplitCommandArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			singleCommandArg();
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 66;
				Match(EQUALS);
				State = 67;
				commaCommandArgs();
				}
			}

			State = 70;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartEqSplitCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext[] singleCommandArg() {
			return GetRuleContexts<SingleCommandArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg(int i) {
			return GetRuleContext<SingleCommandArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		public StartEqSplitCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startEqSplitCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartEqSplitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartEqSplitCommandContext startEqSplitCommand() {
		StartEqSplitCommandContext _localctx = new StartEqSplitCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_startEqSplitCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			lookingForCommandArgEquals = true;
			State = 73;
			singleCommandArg();
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 74;
				Match(EQUALS);
				lookingForCommandArgEquals = false;
				State = 76;
				singleCommandArg();
				}
			}

			State = 79;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPlainSingleCommandArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg() {
			return GetRuleContext<SingleCommandArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartPlainSingleCommandArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPlainSingleCommandArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPlainSingleCommandArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPlainSingleCommandArgContext startPlainSingleCommandArg() {
		StartPlainSingleCommandArgContext _localctx = new StartPlainSingleCommandArgContext(Context, State);
		EnterRule(_localctx, 10, RULE_startPlainSingleCommandArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			singleCommandArg();
			State = 82;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartPlainStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHParser.Eof, 0); }
		public StartPlainStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startPlainString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartPlainString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartPlainStringContext startPlainString() {
		StartPlainStringContext _localctx = new StartPlainStringContext(Context, State);
		EnterRule(_localctx, 12, RULE_startPlainString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			evaluationString();
			State = 85;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(SharpMUSHParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(SharpMUSHParser.SEMICOLON, i);
		}
		public CommandListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commandList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommandList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandListContext commandList() {
		CommandListContext _localctx = new CommandListContext(Context, State);
		EnterRule(_localctx, 14, RULE_commandList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			command();
			State = 92;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 88;
					Match(SEMICOLON);
					State = 89;
					command();
					}
					} 
				}
				State = 94;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FirstCommandMatchContext firstCommandMatch() {
			return GetRuleContext<FirstCommandMatchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSPACE() { return GetToken(SharpMUSHParser.RSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 16, RULE_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			firstCommandMatch();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RSPACE) {
				{
				State = 96;
				Match(RSPACE);
				inCommandMatch = false;
				State = 98;
				evaluationString();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstCommandMatchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public FirstCommandMatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstCommandMatch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstCommandMatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstCommandMatchContext firstCommandMatch() {
		FirstCommandMatchContext _localctx = new FirstCommandMatchContext(Context, State);
		EnterRule(_localctx, 18, RULE_firstCommandMatch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			inCommandMatch = true;
			State = 102;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommaCommandArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext[] singleCommandArg() {
			return GetRuleContexts<SingleCommandArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleCommandArgContext singleCommandArg(int i) {
			return GetRuleContext<SingleCommandArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAWS() { return GetTokens(SharpMUSHParser.COMMAWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAWS(int i) {
			return GetToken(SharpMUSHParser.COMMAWS, i);
		}
		public CommaCommandArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commaCommandArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommaCommandArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommaCommandArgsContext commaCommandArgs() {
		CommaCommandArgsContext _localctx = new CommaCommandArgsContext(Context, State);
		EnterRule(_localctx, 20, RULE_commaCommandArgs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			lookingForCommandArgCommas = true;
			State = 105;
			singleCommandArg();
			State = 110;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 106;
					Match(COMMAWS);
					State = 107;
					singleCommandArg();
					}
					} 
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			lookingForCommandArgCommas = false;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleCommandArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public SingleCommandArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleCommandArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleCommandArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleCommandArgContext singleCommandArg() {
		SingleCommandArgContext _localctx = new SingleCommandArgContext(Context, State);
		EnterRule(_localctx, 22, RULE_singleCommandArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString() {
			return GetRuleContext<ExplicitEvaluationStringContext>(0);
		}
		public EvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluationStringContext evaluationString() {
		EvaluationStringContext _localctx = new EvaluationStringContext(Context, State);
		EnterRule(_localctx, 24, RULE_evaluationString);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				function();
				State = 119;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 118;
					explicitEvaluationString();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121;
				explicitEvaluationString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(SharpMUSHParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(SharpMUSHParser.CBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringConcatenatedRepeatContext[] explicitEvaluationStringConcatenatedRepeat() {
			return GetRuleContexts<ExplicitEvaluationStringConcatenatedRepeatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringConcatenatedRepeatContext explicitEvaluationStringConcatenatedRepeat(int i) {
			return GetRuleContext<ExplicitEvaluationStringConcatenatedRepeatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidSubstitutionContext validSubstitution() {
			return GetRuleContext<ValidSubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginGenericTextContext beginGenericText() {
			return GetRuleContext<BeginGenericTextContext>(0);
		}
		public ExplicitEvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringContext explicitEvaluationString() {
		ExplicitEvaluationStringContext _localctx = new ExplicitEvaluationStringContext(Context, State);
		EnterRule(_localctx, 26, RULE_explicitEvaluationString);
		try {
			int _alt;
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124;
				Match(OBRACK);
				State = 125;
				evaluationString();
				State = 126;
				Match(CBRACK);
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 127;
						explicitEvaluationStringConcatenatedRepeat();
						}
						} 
					}
					State = 132;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				Match(PERCENT);
				State = 134;
				validSubstitution();
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 135;
						explicitEvaluationStringConcatenatedRepeat();
						}
						} 
					}
					State = 140;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141;
				beginGenericText();
				State = 145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 142;
						explicitEvaluationStringConcatenatedRepeat();
						}
						} 
					}
					State = 147;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringConcatenatedRepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(SharpMUSHParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(SharpMUSHParser.CBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValidSubstitutionContext validSubstitution() {
			return GetRuleContext<ValidSubstitutionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTextContext genericText() {
			return GetRuleContext<GenericTextContext>(0);
		}
		public ExplicitEvaluationStringConcatenatedRepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationStringConcatenatedRepeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationStringConcatenatedRepeat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringConcatenatedRepeatContext explicitEvaluationStringConcatenatedRepeat() {
		ExplicitEvaluationStringConcatenatedRepeatContext _localctx = new ExplicitEvaluationStringConcatenatedRepeatContext(Context, State);
		EnterRule(_localctx, 28, RULE_explicitEvaluationStringConcatenatedRepeat);
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150;
				Match(OBRACK);
				State = 151;
				evaluationString();
				State = 152;
				Match(CBRACK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154;
				Match(PERCENT);
				State = 155;
				validSubstitution();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 156;
				genericText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCHAR() { return GetToken(SharpMUSHParser.FUNCHAR, 0); }
		public FunNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunNameContext funName() {
		FunNameContext _localctx = new FunNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_funName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(FUNCHAR);
			++inFunction;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunNameContext funName() {
			return GetRuleContext<FunNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(SharpMUSHParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunArgumentsContext funArguments() {
			return GetRuleContext<FunArgumentsContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 32, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			funName();
			State = 164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 163;
				funArguments();
				}
				break;
			}
			--inFunction;
			State = 167;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunArgumentContext[] funArgument() {
			return GetRuleContexts<FunArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunArgumentContext funArgument(int i) {
			return GetRuleContext<FunArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMAWS() { return GetTokens(SharpMUSHParser.COMMAWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAWS(int i) {
			return GetToken(SharpMUSHParser.COMMAWS, i);
		}
		public FunArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunArgumentsContext funArguments() {
		FunArgumentsContext _localctx = new FunArgumentsContext(Context, State);
		EnterRule(_localctx, 34, RULE_funArguments);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			funArgument();
			State = 174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 170;
					Match(COMMAWS);
					State = 171;
					funArgument();
					}
					} 
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		public FunArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunArgumentContext funArgument() {
		FunArgumentContext _localctx = new FunArgumentContext(Context, State);
		EnterRule(_localctx, 36, RULE_funArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			evaluationString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidSubstitutionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ComplexSubstitutionSymbolContext complexSubstitutionSymbol() {
			return GetRuleContext<ComplexSubstitutionSymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubstitutionSymbolContext substitutionSymbol() {
			return GetRuleContext<SubstitutionSymbolContext>(0);
		}
		public ValidSubstitutionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validSubstitution; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidSubstitution(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidSubstitutionContext validSubstitution() {
		ValidSubstitutionContext _localctx = new ValidSubstitutionContext(Context, State);
		EnterRule(_localctx, 38, RULE_validSubstitution);
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REG_STARTCARET:
			case REG_NUM:
			case VWX:
			case ITEXT_NUM:
			case ITEXT_LAST:
			case STEXT_NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179;
				complexSubstitutionSymbol();
				}
				break;
			case EQUALS:
			case PERCENT:
			case COLON:
			case ARG_NUM:
			case SPACE:
			case BLANKLINE:
			case TAB:
			case DBREF:
			case ENACTOR_NAME:
			case CAP_ENACTOR_NAME:
			case ACCENT_NAME:
			case MONIKER_NAME:
			case SUB_PRONOUN:
			case OBJ_PRONOUN:
			case POS_PRONOUN:
			case ABS_POS_PRONOUN:
			case CALLED_DBREF:
			case EXECUTOR_DBREF:
			case LOCATION_DBREF:
			case LASTCOMMAND_BEFORE_EVAL:
			case LASTCOMMAND_AFTER_EVAL:
			case INVOCATION_DEPTH:
			case CURRENT_ARG_COUNT:
			case OTHER_SUB:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180;
				substitutionSymbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexSubstitutionSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG_STARTCARET() { return GetToken(SharpMUSHParser.REG_STARTCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CCARET() { return GetToken(SharpMUSHParser.CCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG_NUM() { return GetToken(SharpMUSHParser.REG_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITEXT_NUM() { return GetToken(SharpMUSHParser.ITEXT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITEXT_LAST() { return GetToken(SharpMUSHParser.ITEXT_LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STEXT_NUM() { return GetToken(SharpMUSHParser.STEXT_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VWX() { return GetToken(SharpMUSHParser.VWX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext[] explicitEvaluationString() {
			return GetRuleContexts<ExplicitEvaluationStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString(int i) {
			return GetRuleContext<ExplicitEvaluationStringContext>(i);
		}
		public ComplexSubstitutionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexSubstitutionSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexSubstitutionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexSubstitutionSymbolContext complexSubstitutionSymbol() {
		ComplexSubstitutionSymbolContext _localctx = new ComplexSubstitutionSymbolContext(Context, State);
		EnterRule(_localctx, 40, RULE_complexSubstitutionSymbol);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REG_STARTCARET:
				{
				State = 183;
				Match(REG_STARTCARET);
				lookingForRegisterCaret = true;
				State = 188;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 185;
						explicitEvaluationString();
						}
						} 
					}
					State = 190;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				}
				State = 191;
				Match(CCARET);
				lookingForRegisterCaret = false;
				            
				}
				break;
			case REG_NUM:
				{
				State = 193;
				Match(REG_NUM);
				}
				break;
			case ITEXT_NUM:
				{
				State = 194;
				Match(ITEXT_NUM);
				}
				break;
			case ITEXT_LAST:
				{
				State = 195;
				Match(ITEXT_LAST);
				}
				break;
			case STEXT_NUM:
				{
				State = 196;
				Match(STEXT_NUM);
				}
				break;
			case VWX:
				{
				State = 197;
				Match(VWX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstitutionSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(SharpMUSHParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLANKLINE() { return GetToken(SharpMUSHParser.BLANKLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAB() { return GetToken(SharpMUSHParser.TAB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SharpMUSHParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBREF() { return GetToken(SharpMUSHParser.DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENACTOR_NAME() { return GetToken(SharpMUSHParser.ENACTOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAP_ENACTOR_NAME() { return GetToken(SharpMUSHParser.CAP_ENACTOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCENT_NAME() { return GetToken(SharpMUSHParser.ACCENT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONIKER_NAME() { return GetToken(SharpMUSHParser.MONIKER_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT() { return GetToken(SharpMUSHParser.PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB_PRONOUN() { return GetToken(SharpMUSHParser.SUB_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJ_PRONOUN() { return GetToken(SharpMUSHParser.OBJ_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POS_PRONOUN() { return GetToken(SharpMUSHParser.POS_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS_POS_PRONOUN() { return GetToken(SharpMUSHParser.ABS_POS_PRONOUN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARG_NUM() { return GetToken(SharpMUSHParser.ARG_NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALLED_DBREF() { return GetToken(SharpMUSHParser.CALLED_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTOR_DBREF() { return GetToken(SharpMUSHParser.EXECUTOR_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATION_DBREF() { return GetToken(SharpMUSHParser.LOCATION_DBREF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTCOMMAND_BEFORE_EVAL() { return GetToken(SharpMUSHParser.LASTCOMMAND_BEFORE_EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTCOMMAND_AFTER_EVAL() { return GetToken(SharpMUSHParser.LASTCOMMAND_AFTER_EVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOCATION_DEPTH() { return GetToken(SharpMUSHParser.INVOCATION_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ARG_COUNT() { return GetToken(SharpMUSHParser.CURRENT_ARG_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER_SUB() { return GetToken(SharpMUSHParser.OTHER_SUB, 0); }
		public SubstitutionSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substitutionSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstitutionSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubstitutionSymbolContext substitutionSymbol() {
		SubstitutionSymbolContext _localctx = new SubstitutionSymbolContext(Context, State);
		EnterRule(_localctx, 42, RULE_substitutionSymbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 39582414415360L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BeginGenericTextContext beginGenericText() {
			return GetRuleContext<BeginGenericTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCHAR() { return GetToken(SharpMUSHParser.FUNCHAR, 0); }
		public GenericTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTextContext genericText() {
		GenericTextContext _localctx = new GenericTextContext(Context, State);
		EnterRule(_localctx, 44, RULE_genericText);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				beginGenericText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				Match(FUNCHAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginGenericTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EscapedTextContext escapedText() {
			return GetRuleContext<EscapedTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnsiContext ansi() {
			return GetRuleContext<AnsiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(SharpMUSHParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSPACE() { return GetToken(SharpMUSHParser.RSPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(SharpMUSHParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMAWS() { return GetToken(SharpMUSHParser.COMMAWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(SharpMUSHParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CCARET() { return GetToken(SharpMUSHParser.CCARET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(SharpMUSHParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHER() { return GetToken(SharpMUSHParser.OTHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_AT_ALL() { return GetToken(SharpMUSHParser.ANY_AT_ALL, 0); }
		public BeginGenericTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginGenericText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginGenericText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginGenericTextContext beginGenericText() {
		BeginGenericTextContext _localctx = new BeginGenericTextContext(Context, State);
		EnterRule(_localctx, 46, RULE_beginGenericText);
		int _la;
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206;
				escapedText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207;
				ansi();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 208;
				if (!(inFunction == 0)) throw new FailedPredicateException(this, "inFunction == 0");
				State = 209;
				Match(CPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 210;
				if (!(!inCommandMatch || inFunction > 0)) throw new FailedPredicateException(this, "!inCommandMatch || inFunction > 0");
				State = 211;
				Match(RSPACE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 212;
				if (!(!inCommandList)) throw new FailedPredicateException(this, "!inCommandList");
				State = 213;
				Match(SEMICOLON);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 214;
				if (!(!lookingForCommandArgCommas && inFunction == 0)) throw new FailedPredicateException(this, "!lookingForCommandArgCommas && inFunction == 0");
				State = 215;
				Match(COMMAWS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 216;
				if (!(!lookingForCommandArgEquals)) throw new FailedPredicateException(this, "!lookingForCommandArgEquals");
				State = 217;
				Match(EQUALS);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 218;
				if (!(!lookingForRegisterCaret)) throw new FailedPredicateException(this, "!lookingForRegisterCaret");
				State = 219;
				Match(CCARET);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 220;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 401408L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(SharpMUSHParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(SharpMUSHParser.ANY, 0); }
		public EscapedTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscapedText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscapedTextContext escapedText() {
		EscapedTextContext _localctx = new EscapedTextContext(Context, State);
		EnterRule(_localctx, 48, RULE_escapedText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			Match(ESCAPE);
			State = 224;
			Match(ANY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(SharpMUSHParser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACEREGEX() { return GetToken(SharpMUSHParser.SPACEREGEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANYREGEX() { return GetTokens(SharpMUSHParser.ANYREGEX); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANYREGEX(int i) {
			return GetToken(SharpMUSHParser.ANYREGEX, i);
		}
		public RegexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexContext regex() {
		RegexContext _localctx = new RegexContext(Context, State);
		EnterRule(_localctx, 50, RULE_regex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(DOLLAR);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 227;
				Match(ANYREGEX);
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ANYREGEX );
			State = 232;
			Match(SPACEREGEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnsiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OANSI() { return GetToken(SharpMUSHParser.OANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CANSI() { return GetToken(SharpMUSHParser.CANSI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANSICHARACTER() { return GetToken(SharpMUSHParser.ANSICHARACTER, 0); }
		public AnsiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ansi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnsi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnsiContext ansi() {
		AnsiContext _localctx = new AnsiContext(Context, State);
		EnterRule(_localctx, 52, RULE_ansi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(OANSI);
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ANSICHARACTER) {
				{
				State = 235;
				Match(ANSICHARACTER);
				}
			}

			State = 238;
			Match(CANSI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23: return beginGenericText_sempred((BeginGenericTextContext)_localctx, predIndex);
		}
		return true;
	}
	private bool beginGenericText_sempred(BeginGenericTextContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return inFunction == 0;
		case 1: return !inCommandMatch || inFunction > 0;
		case 2: return !inCommandList;
		case 3: return !lookingForCommandArgCommas && inFunction == 0;
		case 4: return !lookingForCommandArgEquals;
		case 5: return !lookingForRegisterCaret;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,50,241,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,3,3,69,8,3,1,3,1,3,1,4,1,4,1,4,1,4,
		1,4,3,4,78,8,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,5,7,91,8,7,
		10,7,12,7,94,9,7,1,8,1,8,1,8,1,8,3,8,100,8,8,1,9,1,9,1,9,1,10,1,10,1,10,
		1,10,5,10,109,8,10,10,10,12,10,112,9,10,1,10,1,10,1,11,1,11,1,12,1,12,
		3,12,120,8,12,1,12,3,12,123,8,12,1,13,1,13,1,13,1,13,5,13,129,8,13,10,
		13,12,13,132,9,13,1,13,1,13,1,13,5,13,137,8,13,10,13,12,13,140,9,13,1,
		13,1,13,5,13,144,8,13,10,13,12,13,147,9,13,3,13,149,8,13,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,3,14,158,8,14,1,15,1,15,1,15,1,16,1,16,3,16,165,8,
		16,1,16,1,16,1,16,1,17,1,17,1,17,5,17,173,8,17,10,17,12,17,176,9,17,1,
		18,1,18,1,19,1,19,3,19,182,8,19,1,20,1,20,1,20,5,20,187,8,20,10,20,12,
		20,190,9,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,199,8,20,1,21,1,21,
		1,22,1,22,3,22,205,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,3,23,222,8,23,1,24,1,24,1,24,1,25,1,25,4,25,
		229,8,25,11,25,12,25,230,1,25,1,25,1,26,1,26,3,26,237,8,26,1,26,1,26,1,
		26,7,92,110,130,138,145,174,188,0,27,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,0,2,4,0,9,10,13,13,22,41,45,
		45,2,0,13,13,17,18,247,0,54,1,0,0,0,2,57,1,0,0,0,4,62,1,0,0,0,6,65,1,0,
		0,0,8,72,1,0,0,0,10,81,1,0,0,0,12,84,1,0,0,0,14,87,1,0,0,0,16,95,1,0,0,
		0,18,101,1,0,0,0,20,104,1,0,0,0,22,115,1,0,0,0,24,122,1,0,0,0,26,148,1,
		0,0,0,28,157,1,0,0,0,30,159,1,0,0,0,32,162,1,0,0,0,34,169,1,0,0,0,36,177,
		1,0,0,0,38,181,1,0,0,0,40,198,1,0,0,0,42,200,1,0,0,0,44,204,1,0,0,0,46,
		221,1,0,0,0,48,223,1,0,0,0,50,226,1,0,0,0,52,234,1,0,0,0,54,55,3,16,8,
		0,55,56,5,0,0,1,56,1,1,0,0,0,57,58,6,1,-1,0,58,59,3,14,7,0,59,60,5,0,0,
		1,60,61,6,1,-1,0,61,3,1,0,0,0,62,63,3,20,10,0,63,64,5,0,0,1,64,5,1,0,0,
		0,65,68,3,22,11,0,66,67,5,9,0,0,67,69,3,20,10,0,68,66,1,0,0,0,68,69,1,
		0,0,0,69,70,1,0,0,0,70,71,5,0,0,1,71,7,1,0,0,0,72,73,6,4,-1,0,73,77,3,
		22,11,0,74,75,5,9,0,0,75,76,6,4,-1,0,76,78,3,22,11,0,77,74,1,0,0,0,77,
		78,1,0,0,0,78,79,1,0,0,0,79,80,5,0,0,1,80,9,1,0,0,0,81,82,3,22,11,0,82,
		83,5,0,0,1,83,11,1,0,0,0,84,85,3,24,12,0,85,86,5,0,0,1,86,13,1,0,0,0,87,
		92,3,16,8,0,88,89,5,12,0,0,89,91,3,16,8,0,90,88,1,0,0,0,91,94,1,0,0,0,
		92,93,1,0,0,0,92,90,1,0,0,0,93,15,1,0,0,0,94,92,1,0,0,0,95,99,3,18,9,0,
		96,97,5,15,0,0,97,98,6,8,-1,0,98,100,3,24,12,0,99,96,1,0,0,0,99,100,1,
		0,0,0,100,17,1,0,0,0,101,102,6,9,-1,0,102,103,3,24,12,0,103,19,1,0,0,0,
		104,105,6,10,-1,0,105,110,3,22,11,0,106,107,5,8,0,0,107,109,3,22,11,0,
		108,106,1,0,0,0,109,112,1,0,0,0,110,111,1,0,0,0,110,108,1,0,0,0,111,113,
		1,0,0,0,112,110,1,0,0,0,113,114,6,10,-1,0,114,21,1,0,0,0,115,116,3,24,
		12,0,116,23,1,0,0,0,117,119,3,32,16,0,118,120,3,26,13,0,119,118,1,0,0,
		0,119,120,1,0,0,0,120,123,1,0,0,0,121,123,3,26,13,0,122,117,1,0,0,0,122,
		121,1,0,0,0,123,25,1,0,0,0,124,125,5,2,0,0,125,126,3,24,12,0,126,130,5,
		3,0,0,127,129,3,28,14,0,128,127,1,0,0,0,129,132,1,0,0,0,130,131,1,0,0,
		0,130,128,1,0,0,0,131,149,1,0,0,0,132,130,1,0,0,0,133,134,5,10,0,0,134,
		138,3,38,19,0,135,137,3,28,14,0,136,135,1,0,0,0,137,140,1,0,0,0,138,139,
		1,0,0,0,138,136,1,0,0,0,139,149,1,0,0,0,140,138,1,0,0,0,141,145,3,46,23,
		0,142,144,3,28,14,0,143,142,1,0,0,0,144,147,1,0,0,0,145,146,1,0,0,0,145,
		143,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,148,124,1,0,0,0,148,133,1,
		0,0,0,148,141,1,0,0,0,149,27,1,0,0,0,150,151,5,2,0,0,151,152,3,24,12,0,
		152,153,5,3,0,0,153,158,1,0,0,0,154,155,5,10,0,0,155,158,3,38,19,0,156,
		158,3,44,22,0,157,150,1,0,0,0,157,154,1,0,0,0,157,156,1,0,0,0,158,29,1,
		0,0,0,159,160,5,16,0,0,160,161,6,15,-1,0,161,31,1,0,0,0,162,164,3,30,15,
		0,163,165,3,34,17,0,164,163,1,0,0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,
		167,6,16,-1,0,167,168,5,6,0,0,168,33,1,0,0,0,169,174,3,36,18,0,170,171,
		5,8,0,0,171,173,3,36,18,0,172,170,1,0,0,0,173,176,1,0,0,0,174,175,1,0,
		0,0,174,172,1,0,0,0,175,35,1,0,0,0,176,174,1,0,0,0,177,178,3,24,12,0,178,
		37,1,0,0,0,179,182,3,40,20,0,180,182,3,42,21,0,181,179,1,0,0,0,181,180,
		1,0,0,0,182,39,1,0,0,0,183,184,5,19,0,0,184,188,6,20,-1,0,185,187,3,26,
		13,0,186,185,1,0,0,0,187,190,1,0,0,0,188,189,1,0,0,0,188,186,1,0,0,0,189,
		191,1,0,0,0,190,188,1,0,0,0,191,192,5,7,0,0,192,199,6,20,-1,0,193,199,
		5,20,0,0,194,199,5,42,0,0,195,199,5,43,0,0,196,199,5,44,0,0,197,199,5,
		21,0,0,198,183,1,0,0,0,198,193,1,0,0,0,198,194,1,0,0,0,198,195,1,0,0,0,
		198,196,1,0,0,0,198,197,1,0,0,0,199,41,1,0,0,0,200,201,7,0,0,0,201,43,
		1,0,0,0,202,205,3,46,23,0,203,205,5,16,0,0,204,202,1,0,0,0,204,203,1,0,
		0,0,205,45,1,0,0,0,206,222,3,48,24,0,207,222,3,52,26,0,208,209,4,23,0,
		0,209,222,5,6,0,0,210,211,4,23,1,0,211,222,5,15,0,0,212,213,4,23,2,0,213,
		222,5,12,0,0,214,215,4,23,3,0,215,222,5,8,0,0,216,217,4,23,4,0,217,222,
		5,9,0,0,218,219,4,23,5,0,219,222,5,7,0,0,220,222,7,1,0,0,221,206,1,0,0,
		0,221,207,1,0,0,0,221,208,1,0,0,0,221,210,1,0,0,0,221,212,1,0,0,0,221,
		214,1,0,0,0,221,216,1,0,0,0,221,218,1,0,0,0,221,220,1,0,0,0,222,47,1,0,
		0,0,223,224,5,1,0,0,224,225,5,46,0,0,225,49,1,0,0,0,226,228,5,11,0,0,227,
		229,5,48,0,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,0,0,230,231,1,
		0,0,0,231,232,1,0,0,0,232,233,5,47,0,0,233,51,1,0,0,0,234,236,5,14,0,0,
		235,237,5,50,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,239,
		5,49,0,0,239,53,1,0,0,0,21,68,77,92,99,110,119,122,130,138,145,148,157,
		164,174,181,188,198,204,221,230,236
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
