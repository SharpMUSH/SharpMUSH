//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/SharpMUSH/SharpMUSH.Generated/SharpMUSHBoolExpParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SharpMUSHBoolExpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN=1, CLOSE=2, NOT=3, AND=4, OR=5, CARRY=6, OWNER=7, INDIRECT=8, EVALUATION=9, 
		EXACTOBJECT=10, FALSE=11, TRUE=12, NAME=13, BIT_FLAG=14, BIT_POWER=15, 
		BIT_TYPE=16, DBREFLIST=17, CHANNEL=18, IP=19, HOSTNAME=20, ATTRIBUTE_COLON=21, 
		STRING=22, ATTRIBUTENAME=23;
	public const int
		RULE_lock = 0, RULE_lockExprList = 1, RULE_lockAndExpr = 2, RULE_lockOrExpr = 3, 
		RULE_lockExpr = 4, RULE_notExpr = 5, RULE_falseExpr = 6, RULE_trueExpr = 7, 
		RULE_enclosedExpr = 8, RULE_ownerExpr = 9, RULE_carryExpr = 10, RULE_bitFlagExpr = 11, 
		RULE_bitPowerExpr = 12, RULE_bitTypeExpr = 13, RULE_channelExpr = 14, 
		RULE_dbRefListExpr = 15, RULE_ipExpr = 16, RULE_hostNameExpr = 17, RULE_nameExpr = 18, 
		RULE_exactObjectExpr = 19, RULE_attributeExpr = 20, RULE_evaluationExpr = 21, 
		RULE_indirectExpr = 22, RULE_string = 23, RULE_attributeName = 24;
	public static readonly string[] ruleNames = {
		"lock", "lockExprList", "lockAndExpr", "lockOrExpr", "lockExpr", "notExpr", 
		"falseExpr", "trueExpr", "enclosedExpr", "ownerExpr", "carryExpr", "bitFlagExpr", 
		"bitPowerExpr", "bitTypeExpr", "channelExpr", "dbRefListExpr", "ipExpr", 
		"hostNameExpr", "nameExpr", "exactObjectExpr", "attributeExpr", "evaluationExpr", 
		"indirectExpr", "string", "attributeName"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'!'", null, null, "'+'", "'$'", "'@'", "'/'", null, 
		null, null, null, null, null, null, null, null, null, null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN", "CLOSE", "NOT", "AND", "OR", "CARRY", "OWNER", "INDIRECT", 
		"EVALUATION", "EXACTOBJECT", "FALSE", "TRUE", "NAME", "BIT_FLAG", "BIT_POWER", 
		"BIT_TYPE", "DBREFLIST", "CHANNEL", "IP", "HOSTNAME", "ATTRIBUTE_COLON", 
		"STRING", "ATTRIBUTENAME"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SharpMUSHBoolExpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SharpMUSHBoolExpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SharpMUSHBoolExpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SharpMUSHBoolExpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LockExprListContext lockExprList() {
			return GetRuleContext<LockExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SharpMUSHBoolExpParser.Eof, 0); }
		public LockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockContext @lock() {
		LockContext _localctx = new LockContext(Context, State);
		EnterRule(_localctx, 0, RULE_lock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			lockExprList();
			State = 51;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LockAndExprContext lockAndExpr() {
			return GetRuleContext<LockAndExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockOrExprContext lockOrExpr() {
			return GetRuleContext<LockOrExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockExprContext lockExpr() {
			return GetRuleContext<LockExprContext>(0);
		}
		public LockExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockExprListContext lockExprList() {
		LockExprListContext _localctx = new LockExprListContext(Context, State);
		EnterRule(_localctx, 2, RULE_lockExprList);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53;
				lockAndExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				lockOrExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 55;
				lockExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockAndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LockExprContext lockExpr() {
			return GetRuleContext<LockExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(SharpMUSHBoolExpParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockExprListContext lockExprList() {
			return GetRuleContext<LockExprListContext>(0);
		}
		public LockAndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockAndExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockAndExprContext lockAndExpr() {
		LockAndExprContext _localctx = new LockAndExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_lockAndExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			lockExpr();
			State = 59;
			Match(AND);
			State = 60;
			lockExprList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockOrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LockExprContext lockExpr() {
			return GetRuleContext<LockExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(SharpMUSHBoolExpParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockExprListContext lockExprList() {
			return GetRuleContext<LockExprListContext>(0);
		}
		public LockOrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockOrExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockOrExprContext lockOrExpr() {
		LockOrExprContext _localctx = new LockOrExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_lockOrExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			lockExpr();
			State = 63;
			Match(OR);
			State = 64;
			lockExprList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NotExprContext notExpr() {
			return GetRuleContext<NotExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnclosedExprContext enclosedExpr() {
			return GetRuleContext<EnclosedExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FalseExprContext falseExpr() {
			return GetRuleContext<FalseExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrueExprContext trueExpr() {
			return GetRuleContext<TrueExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerExprContext ownerExpr() {
			return GetRuleContext<OwnerExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CarryExprContext carryExpr() {
			return GetRuleContext<CarryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndirectExprContext indirectExpr() {
			return GetRuleContext<IndirectExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitFlagExprContext bitFlagExpr() {
			return GetRuleContext<BitFlagExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitPowerExprContext bitPowerExpr() {
			return GetRuleContext<BitPowerExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitTypeExprContext bitTypeExpr() {
			return GetRuleContext<BitTypeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelExprContext channelExpr() {
			return GetRuleContext<ChannelExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DbRefListExprContext dbRefListExpr() {
			return GetRuleContext<DbRefListExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IpExprContext ipExpr() {
			return GetRuleContext<IpExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HostNameExprContext hostNameExpr() {
			return GetRuleContext<HostNameExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameExprContext nameExpr() {
			return GetRuleContext<NameExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExactObjectExprContext exactObjectExpr() {
			return GetRuleContext<ExactObjectExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeExprContext attributeExpr() {
			return GetRuleContext<AttributeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationExprContext evaluationExpr() {
			return GetRuleContext<EvaluationExprContext>(0);
		}
		public LockExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockExprContext lockExpr() {
		LockExprContext _localctx = new LockExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_lockExpr);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				notExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				enclosedExpr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68;
				falseExpr();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69;
				trueExpr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 70;
				ownerExpr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 71;
				carryExpr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 72;
				indirectExpr();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 73;
				bitFlagExpr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 74;
				bitPowerExpr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 75;
				bitTypeExpr();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 76;
				channelExpr();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 77;
				dbRefListExpr();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 78;
				ipExpr();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 79;
				hostNameExpr();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 80;
				nameExpr();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 81;
				exactObjectExpr();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 82;
				attributeExpr();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 83;
				evaluationExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(SharpMUSHBoolExpParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockExprContext lockExpr() {
			return GetRuleContext<LockExprContext>(0);
		}
		public NotExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExprContext notExpr() {
		NotExprContext _localctx = new NotExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_notExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(NOT);
			State = 87;
			lockExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FalseExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(SharpMUSHBoolExpParser.FALSE, 0); }
		public FalseExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_falseExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FalseExprContext falseExpr() {
		FalseExprContext _localctx = new FalseExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_falseExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(FALSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrueExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(SharpMUSHBoolExpParser.TRUE, 0); }
		public TrueExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trueExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrueExprContext trueExpr() {
		TrueExprContext _localctx = new TrueExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_trueExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnclosedExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(SharpMUSHBoolExpParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockExprListContext lockExprList() {
			return GetRuleContext<LockExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(SharpMUSHBoolExpParser.CLOSE, 0); }
		public EnclosedExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enclosedExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnclosedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnclosedExprContext enclosedExpr() {
		EnclosedExprContext _localctx = new EnclosedExprContext(Context, State);
		EnterRule(_localctx, 16, RULE_enclosedExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(OPEN);
			State = 94;
			lockExprList();
			State = 95;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(SharpMUSHBoolExpParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public OwnerExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownerExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnerExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnerExprContext ownerExpr() {
		OwnerExprContext _localctx = new OwnerExprContext(Context, State);
		EnterRule(_localctx, 18, RULE_ownerExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			Match(OWNER);
			State = 98;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CarryExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CARRY() { return GetToken(SharpMUSHBoolExpParser.CARRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public CarryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_carryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCarryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CarryExprContext carryExpr() {
		CarryExprContext _localctx = new CarryExprContext(Context, State);
		EnterRule(_localctx, 20, RULE_carryExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(CARRY);
			State = 101;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitFlagExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_FLAG() { return GetToken(SharpMUSHBoolExpParser.BIT_FLAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public BitFlagExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitFlagExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitFlagExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitFlagExprContext bitFlagExpr() {
		BitFlagExprContext _localctx = new BitFlagExprContext(Context, State);
		EnterRule(_localctx, 22, RULE_bitFlagExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(BIT_FLAG);
			State = 104;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitPowerExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_POWER() { return GetToken(SharpMUSHBoolExpParser.BIT_POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public BitPowerExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitPowerExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitPowerExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitPowerExprContext bitPowerExpr() {
		BitPowerExprContext _localctx = new BitPowerExprContext(Context, State);
		EnterRule(_localctx, 24, RULE_bitPowerExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(BIT_POWER);
			State = 107;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitTypeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_TYPE() { return GetToken(SharpMUSHBoolExpParser.BIT_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public BitTypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitTypeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitTypeExprContext bitTypeExpr() {
		BitTypeExprContext _localctx = new BitTypeExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_bitTypeExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(BIT_TYPE);
			State = 110;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(SharpMUSHBoolExpParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ChannelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelExprContext channelExpr() {
		ChannelExprContext _localctx = new ChannelExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_channelExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(CHANNEL);
			State = 113;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DbRefListExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBREFLIST() { return GetToken(SharpMUSHBoolExpParser.DBREFLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public DbRefListExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbRefListExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbRefListExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DbRefListExprContext dbRefListExpr() {
		DbRefListExprContext _localctx = new DbRefListExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_dbRefListExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(DBREFLIST);
			State = 116;
			attributeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IpExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IP() { return GetToken(SharpMUSHBoolExpParser.IP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public IpExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ipExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIpExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IpExprContext ipExpr() {
		IpExprContext _localctx = new IpExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_ipExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(IP);
			State = 119;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostNameExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTNAME() { return GetToken(SharpMUSHBoolExpParser.HOSTNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public HostNameExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostNameExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHostNameExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HostNameExprContext hostNameExpr() {
		HostNameExprContext _localctx = new HostNameExprContext(Context, State);
		EnterRule(_localctx, 34, RULE_hostNameExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			Match(HOSTNAME);
			State = 122;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(SharpMUSHBoolExpParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public NameExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameExprContext nameExpr() {
		NameExprContext _localctx = new NameExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_nameExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(NAME);
			State = 125;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExactObjectExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXACTOBJECT() { return GetToken(SharpMUSHBoolExpParser.EXACTOBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExactObjectExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exactObjectExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExactObjectExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExactObjectExprContext exactObjectExpr() {
		ExactObjectExprContext _localctx = new ExactObjectExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_exactObjectExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(EXACTOBJECT);
			State = 128;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_COLON() { return GetToken(SharpMUSHBoolExpParser.ATTRIBUTE_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public AttributeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeExprContext attributeExpr() {
		AttributeExprContext _localctx = new AttributeExprContext(Context, State);
		EnterRule(_localctx, 40, RULE_attributeExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			attributeName();
			State = 131;
			Match(ATTRIBUTE_COLON);
			State = 132;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvaluationExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATION() { return GetToken(SharpMUSHBoolExpParser.EVALUATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public EvaluationExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluationExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluationExprContext evaluationExpr() {
		EvaluationExprContext _localctx = new EvaluationExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_evaluationExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			attributeName();
			State = 135;
			Match(EVALUATION);
			State = 136;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndirectExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDIRECT() { return GetToken(SharpMUSHBoolExpParser.INDIRECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVALUATION() { return GetToken(SharpMUSHBoolExpParser.EVALUATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeNameContext attributeName() {
			return GetRuleContext<AttributeNameContext>(0);
		}
		public IndirectExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirectExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirectExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndirectExprContext indirectExpr() {
		IndirectExprContext _localctx = new IndirectExprContext(Context, State);
		EnterRule(_localctx, 44, RULE_indirectExpr);
		try {
			State = 145;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				Match(INDIRECT);
				State = 139;
				@string();
				State = 140;
				Match(EVALUATION);
				State = 141;
				attributeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143;
				Match(INDIRECT);
				State = 144;
				@string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(SharpMUSHBoolExpParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 46, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTENAME() { return GetToken(SharpMUSHBoolExpParser.ATTRIBUTENAME, 0); }
		public AttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISharpMUSHBoolExpParserVisitor<TResult> typedVisitor = visitor as ISharpMUSHBoolExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNameContext attributeName() {
		AttributeNameContext _localctx = new AttributeNameContext(Context, State);
		EnterRule(_localctx, 48, RULE_attributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(ATTRIBUTENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,23,152,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,1,1,1,1,1,1,3,1,57,8,1,1,2,1,
		2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,85,8,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
		1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,
		13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,
		17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
		21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,146,8,22,1,23,1,23,1,24,1,24,
		1,24,0,0,25,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
		42,44,46,48,0,0,146,0,50,1,0,0,0,2,56,1,0,0,0,4,58,1,0,0,0,6,62,1,0,0,
		0,8,84,1,0,0,0,10,86,1,0,0,0,12,89,1,0,0,0,14,91,1,0,0,0,16,93,1,0,0,0,
		18,97,1,0,0,0,20,100,1,0,0,0,22,103,1,0,0,0,24,106,1,0,0,0,26,109,1,0,
		0,0,28,112,1,0,0,0,30,115,1,0,0,0,32,118,1,0,0,0,34,121,1,0,0,0,36,124,
		1,0,0,0,38,127,1,0,0,0,40,130,1,0,0,0,42,134,1,0,0,0,44,145,1,0,0,0,46,
		147,1,0,0,0,48,149,1,0,0,0,50,51,3,2,1,0,51,52,5,0,0,1,52,1,1,0,0,0,53,
		57,3,4,2,0,54,57,3,6,3,0,55,57,3,8,4,0,56,53,1,0,0,0,56,54,1,0,0,0,56,
		55,1,0,0,0,57,3,1,0,0,0,58,59,3,8,4,0,59,60,5,4,0,0,60,61,3,2,1,0,61,5,
		1,0,0,0,62,63,3,8,4,0,63,64,5,5,0,0,64,65,3,2,1,0,65,7,1,0,0,0,66,85,3,
		10,5,0,67,85,3,16,8,0,68,85,3,12,6,0,69,85,3,14,7,0,70,85,3,18,9,0,71,
		85,3,20,10,0,72,85,3,44,22,0,73,85,3,22,11,0,74,85,3,24,12,0,75,85,3,26,
		13,0,76,85,3,28,14,0,77,85,3,30,15,0,78,85,3,32,16,0,79,85,3,34,17,0,80,
		85,3,36,18,0,81,85,3,38,19,0,82,85,3,40,20,0,83,85,3,42,21,0,84,66,1,0,
		0,0,84,67,1,0,0,0,84,68,1,0,0,0,84,69,1,0,0,0,84,70,1,0,0,0,84,71,1,0,
		0,0,84,72,1,0,0,0,84,73,1,0,0,0,84,74,1,0,0,0,84,75,1,0,0,0,84,76,1,0,
		0,0,84,77,1,0,0,0,84,78,1,0,0,0,84,79,1,0,0,0,84,80,1,0,0,0,84,81,1,0,
		0,0,84,82,1,0,0,0,84,83,1,0,0,0,85,9,1,0,0,0,86,87,5,3,0,0,87,88,3,8,4,
		0,88,11,1,0,0,0,89,90,5,11,0,0,90,13,1,0,0,0,91,92,5,12,0,0,92,15,1,0,
		0,0,93,94,5,1,0,0,94,95,3,2,1,0,95,96,5,2,0,0,96,17,1,0,0,0,97,98,5,7,
		0,0,98,99,3,46,23,0,99,19,1,0,0,0,100,101,5,6,0,0,101,102,3,46,23,0,102,
		21,1,0,0,0,103,104,5,14,0,0,104,105,3,46,23,0,105,23,1,0,0,0,106,107,5,
		15,0,0,107,108,3,46,23,0,108,25,1,0,0,0,109,110,5,16,0,0,110,111,3,46,
		23,0,111,27,1,0,0,0,112,113,5,18,0,0,113,114,3,46,23,0,114,29,1,0,0,0,
		115,116,5,17,0,0,116,117,3,48,24,0,117,31,1,0,0,0,118,119,5,19,0,0,119,
		120,3,46,23,0,120,33,1,0,0,0,121,122,5,20,0,0,122,123,3,46,23,0,123,35,
		1,0,0,0,124,125,5,13,0,0,125,126,3,46,23,0,126,37,1,0,0,0,127,128,5,10,
		0,0,128,129,3,46,23,0,129,39,1,0,0,0,130,131,3,48,24,0,131,132,5,21,0,
		0,132,133,3,46,23,0,133,41,1,0,0,0,134,135,3,48,24,0,135,136,5,9,0,0,136,
		137,3,46,23,0,137,43,1,0,0,0,138,139,5,8,0,0,139,140,3,46,23,0,140,141,
		5,9,0,0,141,142,3,48,24,0,142,146,1,0,0,0,143,144,5,8,0,0,144,146,3,46,
		23,0,145,138,1,0,0,0,145,143,1,0,0,0,146,45,1,0,0,0,147,148,5,22,0,0,148,
		47,1,0,0,0,149,150,5,23,0,0,150,49,1,0,0,0,3,56,84,145
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
