//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/SharpMUSH/SharpMUSH.Generated/SharpMUSHLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SharpMUSHLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ESCAPE=1, OBRACK=2, CBRACK=3, OBRACE=4, CBRACE=5, CPAREN=6, CCARET=7, 
		COMMAWS=8, EQUALS=9, PERCENT=10, DOLLAR=11, SEMICOLON=12, OANSI=13, RSPACE=14, 
		FUNCHAR=15, OTHER=16, ANY_AT_ALL=17, COLON=18, REG_STARTCARET=19, REG_NUM=20, 
		VWX=21, ARG_NUM=22, SPACE=23, BLANKLINE=24, TAB=25, DBREF=26, ENACTOR_NAME=27, 
		CAP_ENACTOR_NAME=28, ACCENT_NAME=29, MONIKER_NAME=30, SUB_PRONOUN=31, 
		OBJ_PRONOUN=32, POS_PRONOUN=33, ABS_POS_PRONOUN=34, CALLED_DBREF=35, EXECUTOR_DBREF=36, 
		LOCATION_DBREF=37, LASTCOMMAND_BEFORE_EVAL=38, LASTCOMMAND_AFTER_EVAL=39, 
		INVOCATION_DEPTH=40, CURRENT_ARG_COUNT=41, ITEXT_NUM=42, ITEXT_LAST=43, 
		STEXT_NUM=44, OTHER_SUB=45, ANY=46, SPACEREGEX=47, ANYREGEX=48, CANSI=49, 
		ANSICHARACTER=50;
	public const int
		SUBSTITUTION=1, ESCAPING=2, REGEX=3, ANSI=4;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "SUBSTITUTION", "ESCAPING", "REGEX", "ANSI"
	};

	public static readonly string[] ruleNames = {
		"WS", "ESCAPE", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "CPAREN", "CCARET", 
		"COMMAWS", "EQUALS", "PERCENT", "DOLLAR", "SEMICOLON", "OANSI", "RSPACE", 
		"FUNCHAR", "OTHER", "ANY_AT_ALL", "COLON", "REG_STARTCARET", "REG_NUM", 
		"VWX", "ARG_NUM", "SPACE", "BLANKLINE", "TAB", "DBREF", "ENACTOR_NAME", 
		"CAP_ENACTOR_NAME", "ACCENT_NAME", "MONIKER_NAME", "SUB_PRONOUN", "OBJ_PRONOUN", 
		"POS_PRONOUN", "ABS_POS_PRONOUN", "CALLED_DBREF", "EXECUTOR_DBREF", "LOCATION_DBREF", 
		"LASTCOMMAND_BEFORE_EVAL", "LASTCOMMAND_AFTER_EVAL", "INVOCATION_DEPTH", 
		"CURRENT_ARG_COUNT", "ITEXT_NUM", "ITEXT_LAST", "STEXT_NUM", "OTHER_SUB", 
		"ANY", "SPACEREGEX", "ANYREGEX", "CANSI", "ANSICHARACTER"
	};


	public SharpMUSHLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SharpMUSHLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\'", "'['", "']'", null, "'}'", "')'", "'>'", null, "'='", "'%'", 
		"'$'", null, "'\\u001B'", null, null, null, null, "':'", null, null, null, 
		null, null, null, null, "'#'", "'n'", "'N'", "'~'", null, null, null, 
		null, null, "'@'", "'!'", null, null, null, "'?'", "'+'", null, null, 
		null, null, null, null, null, "'m'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ESCAPE", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "CPAREN", "CCARET", 
		"COMMAWS", "EQUALS", "PERCENT", "DOLLAR", "SEMICOLON", "OANSI", "RSPACE", 
		"FUNCHAR", "OTHER", "ANY_AT_ALL", "COLON", "REG_STARTCARET", "REG_NUM", 
		"VWX", "ARG_NUM", "SPACE", "BLANKLINE", "TAB", "DBREF", "ENACTOR_NAME", 
		"CAP_ENACTOR_NAME", "ACCENT_NAME", "MONIKER_NAME", "SUB_PRONOUN", "OBJ_PRONOUN", 
		"POS_PRONOUN", "ABS_POS_PRONOUN", "CALLED_DBREF", "EXECUTOR_DBREF", "LOCATION_DBREF", 
		"LASTCOMMAND_BEFORE_EVAL", "LASTCOMMAND_AFTER_EVAL", "INVOCATION_DEPTH", 
		"CURRENT_ARG_COUNT", "ITEXT_NUM", "ITEXT_LAST", "STEXT_NUM", "OTHER_SUB", 
		"ANY", "SPACEREGEX", "ANYREGEX", "CANSI", "ANSICHARACTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SharpMUSHLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SharpMUSHLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,50,313,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
		4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,
		7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,
		7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
		7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
		7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,
		7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,
		7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,5,0,109,8,0,10,0,12,0,112,9,0,1,
		1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
		1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
		1,13,1,13,1,13,1,13,1,14,1,14,1,15,4,15,154,8,15,11,15,12,15,155,1,15,
		1,15,1,15,1,16,4,16,162,8,16,11,16,12,16,163,1,17,4,17,167,8,17,11,17,
		12,17,168,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
		1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
		1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,
		1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
		1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
		1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
		1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,
		1,41,1,41,1,41,1,42,1,42,4,42,272,8,42,11,42,12,42,273,1,42,1,42,1,43,
		1,43,1,43,1,43,1,43,1,44,1,44,4,44,285,8,44,11,44,12,44,286,1,44,1,44,
		1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,
		1,49,1,49,1,49,1,49,1,50,4,50,310,8,50,11,50,12,50,311,1,168,0,51,5,0,
		7,1,9,2,11,3,13,4,15,5,17,6,19,7,21,8,23,9,25,10,27,11,29,12,31,13,33,
		14,35,15,37,16,39,17,41,18,43,19,45,20,47,21,49,22,51,23,53,24,55,25,57,
		26,59,27,61,28,63,29,65,30,67,31,69,32,71,33,73,34,75,35,77,36,79,37,81,
		38,83,39,85,40,87,41,89,42,91,43,93,44,95,45,97,46,99,47,101,48,103,49,
		105,50,5,0,1,2,3,4,20,3,0,9,10,12,13,32,32,3,0,48,57,65,90,97,122,9,0,
		27,27,32,32,36,37,40,41,44,44,58,62,91,93,123,123,125,125,2,0,81,81,113,
		113,1,0,48,57,2,0,86,88,118,120,2,0,65,90,97,122,2,0,66,66,98,98,2,0,82,
		82,114,114,2,0,84,84,116,116,2,0,75,75,107,107,2,0,83,83,115,115,2,0,79,
		79,111,111,2,0,80,80,112,112,2,0,65,65,97,97,2,0,76,76,108,108,2,0,67,
		67,99,99,2,0,85,85,117,117,2,0,73,73,105,105,1,0,109,109,314,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
		0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,
		1,0,0,0,1,43,1,0,0,0,1,45,1,0,0,0,1,47,1,0,0,0,1,49,1,0,0,0,1,51,1,0,0,
		0,1,53,1,0,0,0,1,55,1,0,0,0,1,57,1,0,0,0,1,59,1,0,0,0,1,61,1,0,0,0,1,63,
		1,0,0,0,1,65,1,0,0,0,1,67,1,0,0,0,1,69,1,0,0,0,1,71,1,0,0,0,1,73,1,0,0,
		0,1,75,1,0,0,0,1,77,1,0,0,0,1,79,1,0,0,0,1,81,1,0,0,0,1,83,1,0,0,0,1,85,
		1,0,0,0,1,87,1,0,0,0,1,89,1,0,0,0,1,91,1,0,0,0,1,93,1,0,0,0,1,95,1,0,0,
		0,2,97,1,0,0,0,3,99,1,0,0,0,3,101,1,0,0,0,4,103,1,0,0,0,4,105,1,0,0,0,
		5,110,1,0,0,0,7,113,1,0,0,0,9,117,1,0,0,0,11,119,1,0,0,0,13,121,1,0,0,
		0,15,124,1,0,0,0,17,126,1,0,0,0,19,128,1,0,0,0,21,130,1,0,0,0,23,133,1,
		0,0,0,25,135,1,0,0,0,27,139,1,0,0,0,29,143,1,0,0,0,31,146,1,0,0,0,33,150,
		1,0,0,0,35,153,1,0,0,0,37,161,1,0,0,0,39,166,1,0,0,0,41,170,1,0,0,0,43,
		174,1,0,0,0,45,179,1,0,0,0,47,184,1,0,0,0,49,189,1,0,0,0,51,193,1,0,0,
		0,53,197,1,0,0,0,55,201,1,0,0,0,57,205,1,0,0,0,59,209,1,0,0,0,61,213,1,
		0,0,0,63,217,1,0,0,0,65,221,1,0,0,0,67,225,1,0,0,0,69,229,1,0,0,0,71,233,
		1,0,0,0,73,237,1,0,0,0,75,241,1,0,0,0,77,245,1,0,0,0,79,249,1,0,0,0,81,
		253,1,0,0,0,83,257,1,0,0,0,85,261,1,0,0,0,87,265,1,0,0,0,89,269,1,0,0,
		0,91,277,1,0,0,0,93,282,1,0,0,0,95,290,1,0,0,0,97,294,1,0,0,0,99,298,1,
		0,0,0,101,302,1,0,0,0,103,304,1,0,0,0,105,309,1,0,0,0,107,109,7,0,0,0,
		108,107,1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,6,
		1,0,0,0,112,110,1,0,0,0,113,114,5,92,0,0,114,115,1,0,0,0,115,116,6,1,0,
		0,116,8,1,0,0,0,117,118,5,91,0,0,118,10,1,0,0,0,119,120,5,93,0,0,120,12,
		1,0,0,0,121,122,5,123,0,0,122,123,3,5,0,0,123,14,1,0,0,0,124,125,5,125,
		0,0,125,16,1,0,0,0,126,127,5,41,0,0,127,18,1,0,0,0,128,129,5,62,0,0,129,
		20,1,0,0,0,130,131,5,44,0,0,131,132,3,5,0,0,132,22,1,0,0,0,133,134,5,61,
		0,0,134,24,1,0,0,0,135,136,5,37,0,0,136,137,1,0,0,0,137,138,6,10,1,0,138,
		26,1,0,0,0,139,140,5,36,0,0,140,141,1,0,0,0,141,142,6,11,2,0,142,28,1,
		0,0,0,143,144,5,59,0,0,144,145,3,5,0,0,145,30,1,0,0,0,146,147,5,27,0,0,
		147,148,1,0,0,0,148,149,6,13,3,0,149,32,1,0,0,0,150,151,5,32,0,0,151,34,
		1,0,0,0,152,154,7,1,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,
		0,155,156,1,0,0,0,156,157,1,0,0,0,157,158,5,40,0,0,158,159,3,5,0,0,159,
		36,1,0,0,0,160,162,8,2,0,0,161,160,1,0,0,0,162,163,1,0,0,0,163,161,1,0,
		0,0,163,164,1,0,0,0,164,38,1,0,0,0,165,167,9,0,0,0,166,165,1,0,0,0,167,
		168,1,0,0,0,168,169,1,0,0,0,168,166,1,0,0,0,169,40,1,0,0,0,170,171,5,58,
		0,0,171,172,1,0,0,0,172,173,6,18,4,0,173,42,1,0,0,0,174,175,7,3,0,0,175,
		176,5,60,0,0,176,177,1,0,0,0,177,178,6,19,4,0,178,44,1,0,0,0,179,180,7,
		3,0,0,180,181,7,4,0,0,181,182,1,0,0,0,182,183,6,20,4,0,183,46,1,0,0,0,
		184,185,7,5,0,0,185,186,7,6,0,0,186,187,1,0,0,0,187,188,6,21,4,0,188,48,
		1,0,0,0,189,190,7,4,0,0,190,191,1,0,0,0,191,192,6,22,4,0,192,50,1,0,0,
		0,193,194,7,7,0,0,194,195,1,0,0,0,195,196,6,23,4,0,196,52,1,0,0,0,197,
		198,7,8,0,0,198,199,1,0,0,0,199,200,6,24,4,0,200,54,1,0,0,0,201,202,7,
		9,0,0,202,203,1,0,0,0,203,204,6,25,4,0,204,56,1,0,0,0,205,206,5,35,0,0,
		206,207,1,0,0,0,207,208,6,26,4,0,208,58,1,0,0,0,209,210,5,110,0,0,210,
		211,1,0,0,0,211,212,6,27,4,0,212,60,1,0,0,0,213,214,5,78,0,0,214,215,1,
		0,0,0,215,216,6,28,4,0,216,62,1,0,0,0,217,218,5,126,0,0,218,219,1,0,0,
		0,219,220,6,29,4,0,220,64,1,0,0,0,221,222,7,10,0,0,222,223,1,0,0,0,223,
		224,6,30,4,0,224,66,1,0,0,0,225,226,7,11,0,0,226,227,1,0,0,0,227,228,6,
		31,4,0,228,68,1,0,0,0,229,230,7,12,0,0,230,231,1,0,0,0,231,232,6,32,4,
		0,232,70,1,0,0,0,233,234,7,13,0,0,234,235,1,0,0,0,235,236,6,33,4,0,236,
		72,1,0,0,0,237,238,7,14,0,0,238,239,1,0,0,0,239,240,6,34,4,0,240,74,1,
		0,0,0,241,242,5,64,0,0,242,243,1,0,0,0,243,244,6,35,4,0,244,76,1,0,0,0,
		245,246,5,33,0,0,246,247,1,0,0,0,247,248,6,36,4,0,248,78,1,0,0,0,249,250,
		7,15,0,0,250,251,1,0,0,0,251,252,6,37,4,0,252,80,1,0,0,0,253,254,7,16,
		0,0,254,255,1,0,0,0,255,256,6,38,4,0,256,82,1,0,0,0,257,258,7,17,0,0,258,
		259,1,0,0,0,259,260,6,39,4,0,260,84,1,0,0,0,261,262,5,63,0,0,262,263,1,
		0,0,0,263,264,6,40,4,0,264,86,1,0,0,0,265,266,5,43,0,0,266,267,1,0,0,0,
		267,268,6,41,4,0,268,88,1,0,0,0,269,271,7,18,0,0,270,272,7,4,0,0,271,270,
		1,0,0,0,272,273,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,275,1,0,0,
		0,275,276,6,42,4,0,276,90,1,0,0,0,277,278,7,18,0,0,278,279,5,76,0,0,279,
		280,1,0,0,0,280,281,6,43,4,0,281,92,1,0,0,0,282,284,5,36,0,0,283,285,7,
		4,0,0,284,283,1,0,0,0,285,286,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,
		287,288,1,0,0,0,288,289,6,44,4,0,289,94,1,0,0,0,290,291,9,0,0,0,291,292,
		1,0,0,0,292,293,6,45,4,0,293,96,1,0,0,0,294,295,9,0,0,0,295,296,1,0,0,
		0,296,297,6,46,4,0,297,98,1,0,0,0,298,299,5,32,0,0,299,300,1,0,0,0,300,
		301,6,47,4,0,301,100,1,0,0,0,302,303,9,0,0,0,303,102,1,0,0,0,304,305,5,
		109,0,0,305,306,1,0,0,0,306,307,6,49,4,0,307,104,1,0,0,0,308,310,8,19,
		0,0,309,308,1,0,0,0,310,311,1,0,0,0,311,309,1,0,0,0,311,312,1,0,0,0,312,
		106,1,0,0,0,12,0,1,2,3,4,110,155,163,168,273,286,311,5,5,2,0,5,1,0,5,3,
		0,5,4,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
