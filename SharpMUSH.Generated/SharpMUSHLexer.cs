//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/SharpMUSH/SharpMUSH.Generated/SharpMUSHLexer.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class SharpMUSHLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ESCAPE=1, OBRACK=2, CBRACK=3, OBRACE=4, CBRACE=5, CPAREN=6, CCARET=7, 
		COMMAWS=8, EQUALS=9, PERCENT=10, SEMICOLON=11, COLON=12, OANSI=13, RSPACE=14, 
		FUNCHAR=15, OTHER=16, REG_STARTCARET=17, REG_NUM=18, VWX=19, ARG_NUM=20, 
		SPACE=21, BLANKLINE=22, TAB=23, DBREF=24, ENACTOR_NAME=25, CAP_ENACTOR_NAME=26, 
		ACCENT_NAME=27, MONIKER_NAME=28, SUB_PRONOUN=29, OBJ_PRONOUN=30, POS_PRONOUN=31, 
		ABS_POS_PRONOUN=32, CALLED_DBREF=33, EXECUTOR_DBREF=34, LOCATION_DBREF=35, 
		LASTCOMMAND_BEFORE_EVAL=36, LASTCOMMAND_AFTER_EVAL=37, INVOCATION_DEPTH=38, 
		CURRENT_ARG_COUNT=39, ITEXT_NUM=40, STEXT_NUM=41, OTHER_SUB=42, ANY=43, 
		CANSI=44, ANSICHARACTER=45;
	public const int
		SUBSTITUTION=1, ESCAPING=2, ANSI=3;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "SUBSTITUTION", "ESCAPING", "ANSI"
	};

	public static readonly string[] ruleNames = {
		"WS", "ESCAPE", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "CPAREN", "CCARET", 
		"COMMAWS", "EQUALS", "PERCENT", "SEMICOLON", "COLON", "OANSI", "RSPACE", 
		"FUNCHAR", "OTHER", "REG_STARTCARET", "REG_NUM", "VWX", "ARG_NUM", "SPACE", 
		"BLANKLINE", "TAB", "DBREF", "ENACTOR_NAME", "CAP_ENACTOR_NAME", "ACCENT_NAME", 
		"MONIKER_NAME", "SUB_PRONOUN", "OBJ_PRONOUN", "POS_PRONOUN", "ABS_POS_PRONOUN", 
		"CALLED_DBREF", "EXECUTOR_DBREF", "LOCATION_DBREF", "LASTCOMMAND_BEFORE_EVAL", 
		"LASTCOMMAND_AFTER_EVAL", "INVOCATION_DEPTH", "CURRENT_ARG_COUNT", "ITEXT_NUM", 
		"STEXT_NUM", "OTHER_SUB", "ANY", "CANSI", "ANSICHARACTER"
	};


	public SharpMUSHLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SharpMUSHLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\\'", "'['", "']'", "'{'", "'}'", "')'", "'>'", null, "'='", "'%'", 
		"';'", "':'", "'\\u001B'", "' '", null, null, null, null, null, null, 
		null, null, null, "'#'", "'n'", "'N'", "'~'", null, null, null, null, 
		null, "'@'", "'!'", null, null, null, "'?'", "'+'", null, null, null, 
		null, "'m'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ESCAPE", "OBRACK", "CBRACK", "OBRACE", "CBRACE", "CPAREN", "CCARET", 
		"COMMAWS", "EQUALS", "PERCENT", "SEMICOLON", "COLON", "OANSI", "RSPACE", 
		"FUNCHAR", "OTHER", "REG_STARTCARET", "REG_NUM", "VWX", "ARG_NUM", "SPACE", 
		"BLANKLINE", "TAB", "DBREF", "ENACTOR_NAME", "CAP_ENACTOR_NAME", "ACCENT_NAME", 
		"MONIKER_NAME", "SUB_PRONOUN", "OBJ_PRONOUN", "POS_PRONOUN", "ABS_POS_PRONOUN", 
		"CALLED_DBREF", "EXECUTOR_DBREF", "LOCATION_DBREF", "LASTCOMMAND_BEFORE_EVAL", 
		"LASTCOMMAND_AFTER_EVAL", "INVOCATION_DEPTH", "CURRENT_ARG_COUNT", "ITEXT_NUM", 
		"STEXT_NUM", "OTHER_SUB", "ANY", "CANSI", "ANSICHARACTER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SharpMUSHLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SharpMUSHLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,45,278,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,
		2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
		2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
		2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
		2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,
		2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,
		2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,5,0,98,8,0,10,0,
		12,0,101,9,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,
		7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
		1,13,1,13,1,13,1,14,1,14,1,15,4,15,139,8,15,11,15,12,15,140,1,15,1,15,
		1,15,1,16,4,16,147,8,16,11,16,12,16,148,1,17,1,17,1,17,1,17,1,17,1,18,
		1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
		1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
		1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,
		1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
		1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,
		1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,
		1,38,1,39,1,39,1,39,1,39,1,40,1,40,4,40,248,8,40,11,40,12,40,249,1,40,
		1,40,1,41,1,41,4,41,256,8,41,11,41,12,41,257,1,41,1,41,1,42,1,42,1,42,
		1,42,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,4,45,275,8,45,11,45,
		12,45,276,1,148,0,46,4,0,6,1,8,2,10,3,12,4,14,5,16,6,18,7,20,8,22,9,24,
		10,26,11,28,12,30,13,32,14,34,15,36,16,38,17,40,18,42,19,44,20,46,21,48,
		22,50,23,52,24,54,25,56,26,58,27,60,28,62,29,64,30,66,31,68,32,70,33,72,
		34,74,35,76,36,78,37,80,38,82,39,84,40,86,41,88,42,90,43,92,44,94,45,4,
		0,1,2,3,19,3,0,9,10,12,13,32,32,3,0,48,57,65,90,97,122,2,0,81,81,113,113,
		1,0,48,57,2,0,86,88,118,120,2,0,65,90,97,122,2,0,66,66,98,98,2,0,82,82,
		114,114,2,0,84,84,116,116,2,0,75,75,107,107,2,0,83,83,115,115,2,0,79,79,
		111,111,2,0,80,80,112,112,2,0,65,65,97,97,2,0,76,76,108,108,2,0,67,67,
		99,99,2,0,85,85,117,117,2,0,73,73,105,105,1,0,109,109,279,0,6,1,0,0,0,
		0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,
		0,0,0,0,20,1,0,0,0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,
		0,30,1,0,0,0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,1,38,1,0,0,0,1,40,
		1,0,0,0,1,42,1,0,0,0,1,44,1,0,0,0,1,46,1,0,0,0,1,48,1,0,0,0,1,50,1,0,0,
		0,1,52,1,0,0,0,1,54,1,0,0,0,1,56,1,0,0,0,1,58,1,0,0,0,1,60,1,0,0,0,1,62,
		1,0,0,0,1,64,1,0,0,0,1,66,1,0,0,0,1,68,1,0,0,0,1,70,1,0,0,0,1,72,1,0,0,
		0,1,74,1,0,0,0,1,76,1,0,0,0,1,78,1,0,0,0,1,80,1,0,0,0,1,82,1,0,0,0,1,84,
		1,0,0,0,1,86,1,0,0,0,1,88,1,0,0,0,2,90,1,0,0,0,3,92,1,0,0,0,3,94,1,0,0,
		0,4,99,1,0,0,0,6,102,1,0,0,0,8,106,1,0,0,0,10,108,1,0,0,0,12,110,1,0,0,
		0,14,112,1,0,0,0,16,114,1,0,0,0,18,116,1,0,0,0,20,118,1,0,0,0,22,121,1,
		0,0,0,24,123,1,0,0,0,26,127,1,0,0,0,28,129,1,0,0,0,30,131,1,0,0,0,32,135,
		1,0,0,0,34,138,1,0,0,0,36,146,1,0,0,0,38,150,1,0,0,0,40,155,1,0,0,0,42,
		160,1,0,0,0,44,165,1,0,0,0,46,169,1,0,0,0,48,173,1,0,0,0,50,177,1,0,0,
		0,52,181,1,0,0,0,54,185,1,0,0,0,56,189,1,0,0,0,58,193,1,0,0,0,60,197,1,
		0,0,0,62,201,1,0,0,0,64,205,1,0,0,0,66,209,1,0,0,0,68,213,1,0,0,0,70,217,
		1,0,0,0,72,221,1,0,0,0,74,225,1,0,0,0,76,229,1,0,0,0,78,233,1,0,0,0,80,
		237,1,0,0,0,82,241,1,0,0,0,84,245,1,0,0,0,86,253,1,0,0,0,88,261,1,0,0,
		0,90,265,1,0,0,0,92,269,1,0,0,0,94,274,1,0,0,0,96,98,7,0,0,0,97,96,1,0,
		0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,5,1,0,0,0,101,99,1,
		0,0,0,102,103,5,92,0,0,103,104,1,0,0,0,104,105,6,1,0,0,105,7,1,0,0,0,106,
		107,5,91,0,0,107,9,1,0,0,0,108,109,5,93,0,0,109,11,1,0,0,0,110,111,5,123,
		0,0,111,13,1,0,0,0,112,113,5,125,0,0,113,15,1,0,0,0,114,115,5,41,0,0,115,
		17,1,0,0,0,116,117,5,62,0,0,117,19,1,0,0,0,118,119,5,44,0,0,119,120,3,
		4,0,0,120,21,1,0,0,0,121,122,5,61,0,0,122,23,1,0,0,0,123,124,5,37,0,0,
		124,125,1,0,0,0,125,126,6,10,1,0,126,25,1,0,0,0,127,128,5,59,0,0,128,27,
		1,0,0,0,129,130,5,58,0,0,130,29,1,0,0,0,131,132,5,27,0,0,132,133,1,0,0,
		0,133,134,6,13,2,0,134,31,1,0,0,0,135,136,5,32,0,0,136,33,1,0,0,0,137,
		139,7,1,0,0,138,137,1,0,0,0,139,140,1,0,0,0,140,138,1,0,0,0,140,141,1,
		0,0,0,141,142,1,0,0,0,142,143,5,40,0,0,143,144,3,4,0,0,144,35,1,0,0,0,
		145,147,9,0,0,0,146,145,1,0,0,0,147,148,1,0,0,0,148,149,1,0,0,0,148,146,
		1,0,0,0,149,37,1,0,0,0,150,151,7,2,0,0,151,152,5,60,0,0,152,153,1,0,0,
		0,153,154,6,17,3,0,154,39,1,0,0,0,155,156,7,2,0,0,156,157,7,3,0,0,157,
		158,1,0,0,0,158,159,6,18,3,0,159,41,1,0,0,0,160,161,7,4,0,0,161,162,7,
		5,0,0,162,163,1,0,0,0,163,164,6,19,3,0,164,43,1,0,0,0,165,166,7,3,0,0,
		166,167,1,0,0,0,167,168,6,20,3,0,168,45,1,0,0,0,169,170,7,6,0,0,170,171,
		1,0,0,0,171,172,6,21,3,0,172,47,1,0,0,0,173,174,7,7,0,0,174,175,1,0,0,
		0,175,176,6,22,3,0,176,49,1,0,0,0,177,178,7,8,0,0,178,179,1,0,0,0,179,
		180,6,23,3,0,180,51,1,0,0,0,181,182,5,35,0,0,182,183,1,0,0,0,183,184,6,
		24,3,0,184,53,1,0,0,0,185,186,5,110,0,0,186,187,1,0,0,0,187,188,6,25,3,
		0,188,55,1,0,0,0,189,190,5,78,0,0,190,191,1,0,0,0,191,192,6,26,3,0,192,
		57,1,0,0,0,193,194,5,126,0,0,194,195,1,0,0,0,195,196,6,27,3,0,196,59,1,
		0,0,0,197,198,7,9,0,0,198,199,1,0,0,0,199,200,6,28,3,0,200,61,1,0,0,0,
		201,202,7,10,0,0,202,203,1,0,0,0,203,204,6,29,3,0,204,63,1,0,0,0,205,206,
		7,11,0,0,206,207,1,0,0,0,207,208,6,30,3,0,208,65,1,0,0,0,209,210,7,12,
		0,0,210,211,1,0,0,0,211,212,6,31,3,0,212,67,1,0,0,0,213,214,7,13,0,0,214,
		215,1,0,0,0,215,216,6,32,3,0,216,69,1,0,0,0,217,218,5,64,0,0,218,219,1,
		0,0,0,219,220,6,33,3,0,220,71,1,0,0,0,221,222,5,33,0,0,222,223,1,0,0,0,
		223,224,6,34,3,0,224,73,1,0,0,0,225,226,7,14,0,0,226,227,1,0,0,0,227,228,
		6,35,3,0,228,75,1,0,0,0,229,230,7,15,0,0,230,231,1,0,0,0,231,232,6,36,
		3,0,232,77,1,0,0,0,233,234,7,16,0,0,234,235,1,0,0,0,235,236,6,37,3,0,236,
		79,1,0,0,0,237,238,5,63,0,0,238,239,1,0,0,0,239,240,6,38,3,0,240,81,1,
		0,0,0,241,242,5,43,0,0,242,243,1,0,0,0,243,244,6,39,3,0,244,83,1,0,0,0,
		245,247,7,17,0,0,246,248,7,3,0,0,247,246,1,0,0,0,248,249,1,0,0,0,249,247,
		1,0,0,0,249,250,1,0,0,0,250,251,1,0,0,0,251,252,6,40,3,0,252,85,1,0,0,
		0,253,255,5,36,0,0,254,256,7,3,0,0,255,254,1,0,0,0,256,257,1,0,0,0,257,
		255,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,260,6,41,3,0,260,87,1,
		0,0,0,261,262,9,0,0,0,262,263,1,0,0,0,263,264,6,42,3,0,264,89,1,0,0,0,
		265,266,9,0,0,0,266,267,1,0,0,0,267,268,6,43,3,0,268,91,1,0,0,0,269,270,
		5,109,0,0,270,271,1,0,0,0,271,272,6,44,3,0,272,93,1,0,0,0,273,275,8,18,
		0,0,274,273,1,0,0,0,275,276,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,
		95,1,0,0,0,10,0,1,2,3,99,140,148,249,257,276,4,5,2,0,5,1,0,5,3,0,4,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
