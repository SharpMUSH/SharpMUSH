//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/admin/OneDrive/Documents/Repos/MUParser/AntlrCSharp/PennMUSHParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class PennMUSHParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FUNCHAR=1, OBRACK=2, CBRACK=3, OPAREN=4, CPAREN=5, COMMA=6;
	public const int
		RULE_evaluationString = 0, RULE_explicitEvaluationString = 1, RULE_explicitFunction = 2, 
		RULE_function = 3, RULE_funArguments = 4, RULE_genericText = 5;
	public static readonly string[] ruleNames = {
		"evaluationString", "explicitEvaluationString", "explicitFunction", "function", 
		"funArguments", "genericText"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'['", "']'", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FUNCHAR", "OBRACK", "CBRACK", "OPAREN", "CPAREN", "COMMA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PennMUSHParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PennMUSHParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PennMUSHParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PennMUSHParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class EvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString() {
			return GetRuleContext<ExplicitEvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitFunctionContext explicitFunction() {
			return GetRuleContext<ExplicitFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTextContext genericText() {
			return GetRuleContext<GenericTextContext>(0);
		}
		public EvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPennMUSHParserVisitor<TResult> typedVisitor = visitor as IPennMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvaluationStringContext evaluationString() {
		EvaluationStringContext _localctx = new EvaluationStringContext(Context, State);
		EnterRule(_localctx, 0, RULE_evaluationString);
		try {
			State = 21;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12;
				function();
				State = 13;
				explicitEvaluationString();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 15;
				explicitFunction();
				State = 16;
				explicitEvaluationString();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 18;
				function();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 19;
				explicitFunction();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 20;
				genericText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitEvaluationStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitFunctionContext explicitFunction() {
			return GetRuleContext<ExplicitFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitEvaluationStringContext explicitEvaluationString() {
			return GetRuleContext<ExplicitEvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericTextContext genericText() {
			return GetRuleContext<GenericTextContext>(0);
		}
		public ExplicitEvaluationStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitEvaluationString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPennMUSHParserVisitor<TResult> typedVisitor = visitor as IPennMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitEvaluationString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitEvaluationStringContext explicitEvaluationString() {
		ExplicitEvaluationStringContext _localctx = new ExplicitEvaluationStringContext(Context, State);
		EnterRule(_localctx, 2, RULE_explicitEvaluationString);
		try {
			State = 28;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 23;
				explicitFunction();
				State = 24;
				explicitEvaluationString();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 26;
				explicitFunction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 27;
				genericText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBRACK() { return GetToken(PennMUSHParser.OBRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBRACK() { return GetToken(PennMUSHParser.CBRACK, 0); }
		public ExplicitFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPennMUSHParserVisitor<TResult> typedVisitor = visitor as IPennMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitFunctionContext explicitFunction() {
		ExplicitFunctionContext _localctx = new ExplicitFunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_explicitFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			Match(OBRACK);
			State = 31;
			function();
			State = 32;
			Match(CBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPAREN() { return GetToken(PennMUSHParser.OPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunArgumentsContext funArguments() {
			return GetRuleContext<FunArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPAREN() { return GetToken(PennMUSHParser.CPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FUNCHAR() { return GetTokens(PennMUSHParser.FUNCHAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCHAR(int i) {
			return GetToken(PennMUSHParser.FUNCHAR, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPennMUSHParserVisitor<TResult> typedVisitor = visitor as IPennMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 6, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 34;
				Match(FUNCHAR);
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FUNCHAR );
			State = 39;
			Match(OPAREN);
			State = 40;
			funArguments();
			State = 41;
			Match(CPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EvaluationStringContext evaluationString() {
			return GetRuleContext<EvaluationStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(PennMUSHParser.COMMA, 0); }
		public FunArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPennMUSHParserVisitor<TResult> typedVisitor = visitor as IPennMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunArgumentsContext funArguments() {
		FunArgumentsContext _localctx = new FunArgumentsContext(Context, State);
		EnterRule(_localctx, 8, RULE_funArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			evaluationString();
			State = 44;
			Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTextContext : ParserRuleContext {
		public GenericTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPennMUSHParserVisitor<TResult> typedVisitor = visitor as IPennMUSHParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTextContext genericText() {
		GenericTextContext _localctx = new GenericTextContext(Context, State);
		EnterRule(_localctx, 10, RULE_genericText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 49;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 46;
					MatchWildcard();
					}
					} 
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,6,53,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,3,0,22,8,0,1,1,1,1,1,1,1,1,1,1,3,1,29,8,1,1,2,1,
		2,1,2,1,2,1,3,4,3,36,8,3,11,3,12,3,37,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,
		5,5,48,8,5,10,5,12,5,51,9,5,1,5,1,49,0,6,0,2,4,6,8,10,0,0,54,0,21,1,0,
		0,0,2,28,1,0,0,0,4,30,1,0,0,0,6,35,1,0,0,0,8,43,1,0,0,0,10,49,1,0,0,0,
		12,13,3,6,3,0,13,14,3,2,1,0,14,22,1,0,0,0,15,16,3,4,2,0,16,17,3,2,1,0,
		17,22,1,0,0,0,18,22,3,6,3,0,19,22,3,4,2,0,20,22,3,10,5,0,21,12,1,0,0,0,
		21,15,1,0,0,0,21,18,1,0,0,0,21,19,1,0,0,0,21,20,1,0,0,0,22,1,1,0,0,0,23,
		24,3,4,2,0,24,25,3,2,1,0,25,29,1,0,0,0,26,29,3,4,2,0,27,29,3,10,5,0,28,
		23,1,0,0,0,28,26,1,0,0,0,28,27,1,0,0,0,29,3,1,0,0,0,30,31,5,2,0,0,31,32,
		3,6,3,0,32,33,5,3,0,0,33,5,1,0,0,0,34,36,5,1,0,0,35,34,1,0,0,0,36,37,1,
		0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,39,1,0,0,0,39,40,5,4,0,0,40,41,3,
		8,4,0,41,42,5,5,0,0,42,7,1,0,0,0,43,44,3,0,0,0,44,45,5,6,0,0,45,9,1,0,
		0,0,46,48,9,0,0,0,47,46,1,0,0,0,48,51,1,0,0,0,49,50,1,0,0,0,49,47,1,0,
		0,0,50,11,1,0,0,0,51,49,1,0,0,0,4,21,28,37,49
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
